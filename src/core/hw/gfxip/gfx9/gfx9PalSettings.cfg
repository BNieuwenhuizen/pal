/*
 *******************************************************************************
 *
 * Copyright (c) 2013-2017 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

HWL = "Gfx9";
DefaultScope = "PrivatePalGfx9Key";

DefineEnum = "'CsSimdDestCntlMode': ('CsSimdDestCntlDefault', '0'),
                                    ('CsSimdDestCntlForce1',  '1'),
                                    ('CsSimdDestCntlForce0',  '2')";

DefineEnum = "'PrefetchMethod': ('PrefetchCpDma',      '0'),
                                ('PrefetchPrimeUtcL2', '1')";

DefineEnum = "'Gfx9OffchipLdsBufferSize': ('Gfx9OffchipLdsBufferSize8192', '0'),
                                          ('Gfx9OffchipLdsBufferSize4096', '1'),
                                          ('Gfx9OffchipLdsBufferSize2048', '2'),
                                          ('Gfx9OffchipLdsBufferSize1024', '3')";

DefineEnum = "'Gfx9UseDcc': ('Gfx9UseDccSingleSample',          '0x00000001'),
                            ('Gfx9UseDccSrgb',                  '0x00000002'),
                            ('Gfx9UseDccNonTcCompatShaderRead', '0x00000004'),
                            ('Gfx9UseDccPrt',                   '0x00000008'),
                            ('Gfx9UseDccMultiSample2x',         '0x00000010'),
                            ('Gfx9UseDccMultiSample4x',         '0x00000020'),
                            ('Gfx9UseDccMultiSample8x',         '0x00000040'),
                            ('Gfx9UseDccEqaa',                  '0x00000080')";

DefineEnum = "'Gfx9DecompressMask': ('Gfx9DecompressDcc',       '0x00000001'),
                                    ('Gfx9DecompressHtile',     '0x00000002'),
                                    ('Gfx9DecompressFmask',     '0x00000004'),
                                    ('Gfx9DecompressFastClear', '0x00000008')";

DefineEnum = "'Gfx9DccOnCompute' : ('Gfx9DccOnComputeInit',      '0x00000001'),
                                   ('Gfx9DccOnComputeFastClear', '0x00000002')";

DefineEnum = "'Gfx9OutOfOrderPrimMode': ('Gfx9OutOfOrderPrimDisable',    '0'),
                                        ('Gfx9OutOfOrderPrimSafe',       '1'),
                                        ('Gfx9OutOfOrderPrimAggressive', '2'),
                                        ('Gfx9OutOfOrderPrimAlways',     '3')";

DefineEnum = "'Gfx9BinningMode': ('Gfx9DeferredBatchBinDisabled', '0'),
                                 ('Gfx9DeferredBatchBinCustom',   '1'),
                                 ('Gfx9DeferredBatchBinAccurate', '2')";

DefineEnum = "'Gfx9InitMetaDataFill': ('Gfx9InitMetaDataFillDcc',   '0x00000001'),
                                      ('Gfx9InitMetaDataFillCmask', '0x00000002'),
                                      ('Gfx9InitMetaDataFillHtile', '0x00000004')";

DefineEnum = "'Gfx9PrintMetaEquationInfo': ('Gfx9PrintMetaEquationInfoEquations',   '0x00000001'),
                                           ('Gfx9PrintMetaEquationInfoProcessing',  '0x00000002')";

DefineEnum = "'Gfx9NggMode' : ('Gfx9NggDisabled',       '0x00'),
                              ('Gfx9NggEnableInternal', '0x01'),
                              ('Gfx9NggEnableExternal', '0x02'),
                              ('Gfx9NggEnableClient',   '0x04')
                              ('Gfx9NggEnableAll',      '0x07')";

DefineEnum = "'Gfx9WdLoadBalancingMode': ('Gfx9WdLoadBalancingDisabled', '0x0'),
                                         ('Gfx9WdLoadBalancingBasic',    '0x1'),
                                         ('Gfx9WdLoadBalancingAdvanced', '0x2')";

DefineEnum = "'Gfx9OffChipHsCopyMethod' : ('Gfx9OffChipHsImmediate',          '0x0'),
                                          ('Gfx9OffChipHsCopyAllAtEnd',       '0x1'),
                                          ('Gfx9OffChipHsCopyMultiElements',  '0x2')";

DefineEnum = "'Gfx9OptimizedFastClear'  : ('Gfx9OptimizedFastClearDisabled',   '0x00000000'),
                                          ('Gfx9OptimizedFastClearColorCmask', '0x00000001'),
                                          ('Gfx9OptimizedFastClearColorDcc',   '0x00000002'),
                                          ('Gfx9OptimizedFastClearDepth',      '0x00000004')";

DefineEnum = "'Gfx9PrefetchCommands'  : ('Gfx9PrefetchCommandsDisabled',      '0'),
                                        ('Gfx9PrefetchCommandsBuildInfo',     '1'),
                                        ('Gfx9PrefetchCommandsForceAllDe',    '2'),
                                        ('Gfx9PrefetchCommandsForceAllDeAce', '3')";

Node = "Hardware Layers"
{
    Node = "General"
    {
        Leaf
        {
            SettingName = "Gfx9DisableBorderColorPaletteBinds";
            SettingType = "BOOL_STR";
            Description = "Disables binding of border color palettes, and forces any samplers created to use a\r\n
                           transparent black color. ";
            VariableName = "disableBorderColorPaletteBinds";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9DrainPsOnOverlap";
            SettingType = "BOOL_STR";
            Description = "Related to primitive ordered pixel shading.  If set, forces the PS to drain on any
                           detected overlapping wave";
            VariableName = "drainPsOnOverlap";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9PrintMetaEquationInfo";
            SettingType = "HEX_STR";
            Description = "Controls printing of meta-equation data.  Debug builds only.\r\n
                              0x00000001 : prints meta equations themselves\r\n
                              0x00000002 : prints equation coordinates as they're processed\r\n";
            VariableName = "printMetaEquationInfo";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9ProcessMetaEquationViaCpu";
            SettingType = "BOOL_STR";
            Description = "If true, the meta-equations will be processed by the cpu instead of by a compute shader.
                           Emulation, debug builds only.  Useful for pre-silicon development";
            VariableName = "processMetaEquationViaCpu";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9OptimizedFastClear";
            SettingType = "HEX_STR";
            Description = "If enabled, the meta-equations will be processed by an optimized compute shader and algorithm  Bits:\r\n
                           Disable the Optimized Fast Clear Path                                                   = 0x0\r\n
                           Enable Optimized Fast Clear Path for color surfaces cmask metadata fastclear(msaa only) = 0x1\r\n
                           Enable Optimized Fast Clear Path for color surfaces dcc metadata fastclear              = 0x2\r\n
                           Enable Optimized Fast Clear Path for depth surfaces htile metadata fastclear            = 0x4\r\n";
            VariableName = "optimizedFastClear";
            VariableType = "uint32";
            VariableDefault = "Gfx9OptimizedFastClearColorCmask | Gfx9OptimizedFastClearColorDcc | Gfx9OptimizedFastClearDepth";
        }
        Leaf
        {
            SettingName = "Gfx9AlwaysDecompress";
            SettingType = "HEX_STR";
            Description = "Controls whether the specified decompress / expand / eliminate operations will
                           always occur when requested\r\n
                               DCC decompress      : 0x00000001\r\n
                               depth expand        : 0x00000002\r\n
                               fMask decompress    : 0x00000004\r\n
                               fast clear eliminate: 0x00000008\r\n";
            VariableName = "alwaysDecompress";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Treat1dAs2d";
            SettingType = "BOOL_STR";
            Description = "True to override 1D images to be 2D instead.";
            VariableName = "treat1dAs2d";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9ForceGraphicsFillMemoryPath";
            SettingType = "BOOL_STR";
            Description = "Forces use of a graphics fill memory path on command buffers that supports graphics ops";
            VariableName = "forceGraphicsFillMemoryPath";
            VariableType = "bool";
            VariableDefault = "false";
        }
    }
    Node = "Cache flush"
    {
        Leaf
        {
            SettingName = "Gfx9WaitOnMetadataMipTail";
            SettingType = "BOOL_STR";
            Description = "Controls whether to wait after F/I when changing targets within a Metadata mip tail region.\r\n
                           This can resolve corruptions related to metadata cache conflicts.";
            VariableName = "waitOnMetadataMipTail";
            VariableType = "bool";
            VariableDefault = "true";
        }
    }
    Node = "Color Targets"
    {
        Leaf
        {
            SettingName = "Gfx9BlendOptimizationEnable";
            SettingType = "BOOL_STR";
            Description = "If true, writes the COLOR_SRC_OPT and COLOR_DST_OPT bits of the
                           SX_MRT#_BLEND_OPT for Blend States.";
            VariableName = "blendOptimizationsEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9FastColorClearEnable";
            SettingType = "BOOL_STR";
            Description = "If true, DCC will be used to support fast color clears on single
                           sampled Color Target Images.";
            VariableName = "fastColorClearEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9FastColorClearOn3DEnable";
            SettingType = "BOOL_STR";
            Description = "If true, DCC will be used to support fast color clears on single
                           sampled 3D Color Target Images.";
            VariableName = "fastColorClearOn3dEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9FmaskCompressDisable";
            SettingType = "BOOL_STR";
            Description = "Controls the setting of the CB_COLOR_INFO.FMASK_COMPRESSION_DISABLE bit.";
            VariableName = "fmaskCompressDisable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9DccOnComputeEnable";
            SettingType = "HEX_STR";
            Description = "Determines the situations on which a compute shader will be used for DCC access\r\n
                                One time init    : 0x00000001 \r\n
                                Fast color clear : 0x00000002 \r\n";
            VariableName = "dccOnComputeEnable";
            VariableType = "uint32";
            VariableDefault = "3";
        }
        Leaf
        {
            SettingName = "Gfx9UseDcc";
            SettingType = "HEX_STR";
            Description = "Bitmask of cases where DCC (delta color compression) surfaces will be used\r\n
                               Single sample render targets:   0x00000001 \r\n
                               SRGB numeric format images:     0x00000002 \r\n
                               Non-TC compatible shader read:  0x00000004 \r\n
                               Partially resident textures:    0x00000008 \r\n
                               2x multisample render targets:  0x00000010 \r\n
                               4x multisample render targets:  0x00000020 \r\n
                               8x multisample render targets:  0x00000040 \r\n
                               EQAA render targets:            0x00000080 \r\n";
            VariableName = "useDcc";
            VariableType = "uint32";
            VariableDefault = "0x0000000ff";
        }
    }
    Node = "Compute Pipelines"
    {
        Leaf
        {
            SettingName = "Gfx9CsMaxWavesPerCu";
            SettingType = "UINT_STR";
            Description = "Controls the WAVES_PER_SH field in the COMPUTE_RESOURCE_LIMITS register;\r\n
                           note that it is specified per-CU rather than per-SH for convenience.\r\n
                           If non-zero, it limits the number of waves in flight in each compute unit.\r\n
                           Must be no greater than 40.";
            VariableName = "csMaxWavesPerCu";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9CsLockThreshold";
            SettingType = "UINT_STR";
            Description = "Controls the LOCK_THRESHOLD field in the COMPUTE_RESOURCE_LIMITS register.
                           \r\nCS per-SH low threshold for locking. Granularity 4, 0 disables locking.";
            VariableName = "csLockThreshold";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9CsSimdDestCntl";
            SettingType = "UINT_STR";
            Description = "Controls the SIMD_DEST_CNTL field of the COMPUTE_RESOURCE_LIMITS register.
                           \r\nBy default, this flag is calulated based on the number of waves in the
                           \r\ndispatch. If the number of waves is a multiple of 4, this flag is set,
                           \r\notherwise it is cleared.
                           \r\n0 - Keeps the default SIMD_DEST_CNTL behavior.
                           \r\n1 - Forces SIMD_DEST_CNTL to 1.
                           \r\n2 - Forces SIMD_DEST_CNTL to 0.";
            VariableName = "csSimdDestCntl";
            VariableType = "CsSimdDestCntlMode";
            VariableDefault = "CsSimdDestCntlDefault";
        }
    }
    Node = "Depth/Stencil"
    {
        Leaf
        {
            SettingName = "Gfx9HtileEnable";
            SettingType = "BOOL_STR";
            Description = "If true, HTile will be enabled for depth/stencil images.";
            VariableName = "htileEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DepthCompressEnable";
            SettingType = "BOOL_STR";
            Description = "If true, depth compression will be enabled (requires HTile).";
            VariableName = "depthCompressEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9StencilCompressEnable";
            SettingType = "BOOL_STR";
            Description = "If true, stencil compression will be enabled (requires HTile).";
            VariableName = "stencilCompressEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DbPreloadEnable";
            SettingType = "BOOL_STR";
            Description = "If true, DB preloading will be enabled (requires HTile).";
            VariableName = "dbPreloadEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DbPreloadWinEnable";
            SettingType = "BOOL_STR";
            Description = "If true, DB preload window dimensions will be used instead of the depth\r\n
                           buffer's dimensions. (requires HTile).";
            VariableName = "dbPreloadWinEnable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9DbPerTileExpClearEnable";
            SettingType = "BOOL_STR";
            Description = "If true, per-tile tracking of exp/clear will be enabled (requires HTile).";
            VariableName = "dbPerTileExpClearEnable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9HiDepthEnable";
            SettingType = "BOOL_STR";
            Description = "If true, hierarchical depth testing will be enabled (requires HTile).";
            VariableName = "hiDepthEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9HiStencilEnable";
            SettingType = "BOOL_STR";
            Description = "If true, hierarchical stencil testing will be enabled (requires HTile).";
            VariableName = "hiStencilEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DbRequestSize";
            SettingType = "HEX_STR";
            Description = "Specifies the DB read request size.\r\n
                           0 = 256-bit request size.\r\n
                           1 = 512-bit request size.";
            VariableName = "dbRequestSize";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9DbDisableColorOnValidation";
            SettingType = "BOOL_STR";
            Description = "Controls the DB_RENDER_OVERRIDE2.DISABLE_COLOR_ON_VALIDATION register field";
            VariableName = "dbDisableColorOnValidation";
            VariableType = "bool";
            VariableDefault = "false";
        }
    }
    Node = "Graphics Pipelines"
    {
        Leaf
        {
            SettingName = "Gfx9EnableOnchipGs";
            SettingType = "BOOL_STR";
            Description = "If true, onchip GS will be used if possible.";
            VariableName = "enableOnchipGs";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9EnableOutOfOrderPrimitives";
            SettingType = "UINT_STR";
            Description = "Enable out-of-order primitive mode. Only available on\r\n
                           parts that have more than one VGT.\r\n
                           0 - Always Disable\r\n
                           1 - Enable when known to not affect render output\r\n
                           2 - Enable when suspected to not affect render output\r\n
                           3 - Always Enable";
            VariableName = "enableOutOfOrderPrimitives";
            VariableType = "Gfx9OutOfOrderPrimMode";
            VariableDefault = "Gfx9OutOfOrderPrimSafe";
        }
        Leaf
        {
            SettingName = "Gfx9OutOfOrderWatermark";
            SettingType = "UINT_STR";
            Description = "The watermark value for out-of-order primitives.\r\n
                           Valid values range from 0-7 and are log(2) of the watermark.\r\n";
            VariableName = "outOfOrderWatermark";
            VariableType = "uint32";
            VariableDefault = "7";
        }
        Leaf
        {
            SettingName = "Gfx9GfxMaxWavesPerCu";
            SettingType = "UINT_STR";
            Description = "Controls the WAVE_LIMIT field in the SPI_SHADER_PGM_RSRC3_*S register;\r\n
                           note that it is specified per-CU rather than per-SH for convenience.\r\n
                           If non-zero, it limits the number of waves in flight in each compute unit.\r\n
                           Must be no greater than 40.";
            VariableName = "gfxMaxWavesPerCu";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9GsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-GS stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-GS prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "gsCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9GsMaxLdsSize";
            SettingType = "UINT_STR";
            Description = "Maximum amount of LDS space to alloc for each on-chip\r\n
                           GS subgroup, in DWORDs. Must be 128 dword aligned.\r\n";
            VariableName = "gsMaxLdsSize";
            VariableType = "uint32";
            VariableDefault = "8 * 1024";
        }
        Leaf
        {
            SettingName = "Gfx9GsOffChipThreshold";
            SettingType = "UINT_STR";
            Description = "If the number of GS prims per subgroup * GS\r\n
                           instance count is less than this threshold use off-chip GS.\r\n";
            VariableName = "gsOffChipThreshold";
            VariableType = "uint32";
            VariableDefault = "64";
        }
        Leaf
        {
            SettingName = "Gfx9GsPrimsPerSubGroup";
            SettingType = "UINT_STR";
            Description = "Target number of GS prims per subgroup when running with on-chip GS.\r\n";
            VariableName = "idealGsPrimsPerSubGroup";
            VariableType = "uint32";
            VariableDefault = "64";
        }
        Leaf
        {
            SettingName = "Gfx9LateAllocGs";
            SettingType = "UINT_STR";
            Description = "Controls the value for late-alloc GS. Can be no more than 127.";
            VariableName = "lateAllocGs";
            VariableType = "uint32";
            VariableDefault = "16";
        }
        Leaf
        {
            SettingName = "Gfx9MaxTessFactor";
            SettingType = "FLOAT_STR";
            Description = "Clamps the maximum tessellation factor. Default is 64.0.";
            VariableName = "maxTessFactor";
            VariableType = "float";
            VariableDefault = "64.0f";
        }
        Leaf
        {
            SettingName = "Gfx9NumOffchipLdsBuffers";
            SettingType = "UINT_STR";
            Description = "Controls the number of LDS buffers used for offchip tessellation:
                           \r\nGfx9: 1->508: Number of offchip tessellation buffers.";
            VariableName = "numOffchipLdsBuffers";
            VariableType = "uint32";
            VariableDefault = "508";
        }
        Leaf
        {
            SettingName = "Gfx9NumTessPatchesPerThreadGroup";
            SettingType = "UINT_STR";
            Description = "Controls the number of patches-per-thread-group to run when tessellation
                           is enabled. This value is normally limited by hardware resources (LDS,
                           TFBuffer, Threads).\r\n
                           - Setting to 1 will always work, but is slowest.\r\n
                           - Setting to 0 will allow the driver to choose the optimal value.\r\n
                           - Any other value will be used (clamped based on HW resources).\r\n
                           Offchip Tess rounds this to the nearest multiple of four.";
            VariableName = "numTessPatchesPerTg";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9OffchipLdsBufferSize";
            SettingType = "UINT_STR";
            Description = "Controls the size of each offchip LDS Buffer.
                           \r\n0: 8K DWORDs.
                           \r\n1: 4K DWORDs.
                           \r\n2: 2K DWORDs.
                           \r\n3: 1K DWORDs.";
            VariableName = "offchipLdsBufferSize";
            VariableType = "uint32";
            VariableDefault = "Gfx9OffchipLdsBufferSize8192";
        }
        Leaf
        {
            SettingName = "Gfx9IsolineDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is active: the min tess\r\n
                           factors for each patch processed by a VGT are accumulated. When the sum\r\n
                           exceeds this threshold, the next patch is sent to a different VGT.";
            VariableName = "isolineDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "40";
        }
        Leaf
        {
            SettingName = "Gfx9TriDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is active: the min tess\r\n
                           factors for each patch processed by a VGT are accumulated. When the sum\r\n
                           exceeds this threshold, the next patch is sent to a different VGT.\r\n
                           Recommended to be higher than quad factor";
            VariableName = "triDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "30";
        }
        Leaf
        {
            SettingName = "Gfx9QuadDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is active: the min tess\r\n
                           factors for each patch processed by a VGT are accumulated. When the sum\r\n
                           exceeds this threshold, the next patch is sent to a different VGT.";
            VariableName = "quadDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "24";
        }
        Leaf
        {
            SettingName = "Gfx9DonutDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is in DONUT mode: the\r\n
                           min tess factor for each patch is tested against this threshold to determine\r\n
                           whether a patch gets split up. If the patch isn't split, it still increments\r\n
                           the accumulator for the Patch distribution factor.";
            VariableName = "donutDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "24";
        }
        Leaf
        {
            SettingName = "Gfx9TrapezoidDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used when the distribution mode is TRAPEZOID for quad and tri domain types.\r\n
                           The number of donuts in the patch are compared against this value to detemine whether\r\n
                           this donut gets split up into trapezoids (needs the patch to be in donut mode). A value\r\n
                            of 0 or 1 will be treated as 2. The innermost donut is never allowed to be broken into\r\n
                            trapezoids.";
            VariableName = "trapezoidDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "6";
        }
        Leaf
        {
            SettingName = "Gfx9PrimgroupSize";
            SettingType = "UINT_STR";
            Description = "Number of primitives sent to one VGT before switching to the next.\r\n
                           Valid range is 1-65536, values larger than 256 are expected to hurt
                           performance.\r\nThis setting only affects non-tessellation and non-NGG pipelines.";
            VariableName = "primGroupSize";
            VariableType = "uint32";
            VariableDefault = "128";
        }
        Leaf
        {
            SettingName = "Gfx9PsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-PS stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-PS prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "psCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9RbPlusEnable";
            SettingType = "BOOL_STR";
            Description = "If true, RbPlus will be enabled for ASIC of RbPlus capability.";
            VariableName = "gfx9RbPlusEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9SwitchVgtOnDraw";
            SettingType = "BOOL_STR";
            Description = "If true, the HW will alternate VGT's between draws rather than between
                           \r\nsets of primitives within a draw. True is safer, but less performant.";
            VariableName = "switchVgtOnDraw";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9TessFactorBufferSizePerSe";
            SettingType = "UINT_STR";
            Description = "Controls the size of the tess-factor buffer. This size is per-SE, and
                           measured in DWORDs.";
            VariableName = "tessFactorBufferSizePerSe";
            VariableType = "uint32";
            VariableDefault = "0x2000";
        }
        Leaf
        {
            SettingName = "Gfx9TessWalkPattern";
            SettingType = "UINT_STR";
            Description = "Vertex walking pattern for tessellation:\r\n
                           0: (default) Donut walking pattern for optimal reuse.\r\n
                           1: Single-ring walking pattern, has suboptimal reuse.";
            VariableName = "disableTessDonutWalkPattern";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9UseMaxOffchipLdsBuffers";
            SettingType = "BOOL_STR";
            Description = "If true, offchip tessellation will always use the maximum number of
                           LDS buffers possible (based on Chip ID).";
            VariableName = "useMaxOffchipLdsBuffers";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9VsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-VS stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-VS prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "vsCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9VsHalfPackThreshold";
            SettingType = "UINT_STR";
            Description = "Load half-packed VS waves, forcing them to use half as much space in the
                           \r\nparam cache at the expense of inefficient use of ALU resources, if
                           \r\nthe export count is >= this threshold. This can help performance in
                           \r\nsome cases.";
            VariableName = "vsHalfPackThreshold";
            VariableType = "uint32";
            VariableDefault = "16";
        }
        Leaf
        {
            SettingName = "Gfx9VsForcePartialWave";
            SettingType = "BOOL_STR";
            Description = "If true, forces the VGT to issue a VS wave as soon as a primgroup is
                           finished.";
            VariableName = "vsForcePartialWave";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9DisableCoverageAaMask";
            SettingType = "BOOL_STR";
            Description = "Current recommendation from the hardware team is to force\r\n
                           PA_SC_CONSERVATIVE_RAST_CNTL.COVERAGE_AA_MASK = 0";
            VariableName = "disableCoverageAaMask";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DynamicPrimgroupEnable";
            SettingType = "BOOL_STR";
            Description = "Enables dynamic primgroup size optimization.";
            VariableName = "dynamicPrimGroupEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6DynamicPrimgroupMin";
            SettingType = "UINT_STR";
            Description = "The lower limit for the dynamic primitive group size.";
            VariableName = "dynamicPrimGroupMin";
            VariableType = "uint32";
            VariableDefault = "32";
        }
        Leaf
        {
            SettingName = "Gfx9DynamicPrimgroupMax";
            SettingType = "UINT_STR";
            Description = "The upper limit for the dynamic primitive group size.";
            VariableName = "dynamicPrimGroupMax";
            VariableType = "uint32";
            VariableDefault = "128";
        }
        Leaf
        {
            SettingName = "Gfx9DynamicPrimgroupStep";
            SettingType = "UINT_STR";
            Description = "The dynamic primitive group size is limited to multiples of this value.\r\n
                           This must be a power of two.";
            VariableName = "dynamicPrimGroupStep";
            VariableType = "uint32";
            VariableDefault = "32";
        }
        Leaf
        {
            SettingName = "Gfx9DynamicPrimgroupWindowSize";
            SettingType = "UINT_STR";
            Description = "The number of previous draws to examine when selecting a new primitive group size.";
            VariableName = "dynamicPrimGroupWindowSize";
            VariableType = "uint32";
            VariableDefault = "32";
        }
        Leaf
        {
            SettingName = "Gfx9WdLoadBalancingMode";
            SettingType = "HEX_STR";
            Description = "Setting for controlling work distributor load balancing.\r\n
                           0x0 - Disabled. Software load balancing.\r\n
                           0x1 - Basic. Enables small instance optimization.\r\n
                           0x2 - Advanced. Enabled basic mode plus small instance unrolling draws optimization.";
            VariableName = "wdLoadBalancingMode";
            VariableType = "Gfx9WdLoadBalancingMode";
            VariableDefault = "Gfx9WdLoadBalancingAdvanced";
        }
        Leaf
        {
            SettingName = "BatchBreakOnNewPixelShader";
            SettingType = "BOOL_STR";
            Description = "True forces a BATCH_BREAK event when a new pixel shader is bound. False by default.";
            VariableName = "batchBreakOnNewPixelShader";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9GsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided GS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for GS waves.\r\n";
            VariableName = "gsCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
        Leaf
        {
            SettingName = "Gfx9VsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided VS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for VS waves.\r\n";
            VariableName = "vsCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
        Leaf
        {
            SettingName = "Gfx9PsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided PS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for PS waves.\r\n";
            VariableName = "psCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
    }
    Node = "Shader Options"
    {
        Leaf
        {
            SettingName = "Gfx9OffChipHsCopyMethod";
            SettingType = "UINT_STR";
            Description = "Specifies to SC how to copy HS outputs to off-chip memory.\r\n
                           0 - Copy HS outputs directly to off-chip memory.\r\n
                           1 - (Default)Write HS outputs to LDS, then at end of HS use multi-threaded loop to copy\r\n
                               from LDS to off-chip memory.\r\n
                           2 - Writes output control points and patch constants directly to off-chip and only copy the
                               input control point to memory at the end.\r\n";
            VariableName = "gfx9OffChipHsCopyMethod";
            VariableType = "Gfx9OffChipHsCopyMethod";
            VariableDefault = "Gfx9OffChipHsCopyAllAtEnd";
        }
        Leaf
        {
            SettingName = "Gfx9OffChipHsSkipDataCopyNullPatch";
            SettingType = "BOOL_STR";
            Description = "Enables SC optimization to skip copying data from HS for null patches\r\n";
            VariableName = "gfx9OffChipHsSkipDataCopyNullPatch";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9OptimizeDsDataFetch";
            SettingType = "BOOL_STR";
            Description = "Enables SC optimization for optimized DS data fetch.\r\n";
            VariableName = "gfx9OptimizeDsDataFetch";
            VariableType = "bool";
            VariableDefault = "false";
        }
    }
    Node = "NGG Controls"
    {
        Leaf
        {
            SettingName = "Gfx9NggMode";
            SettingType = "HEX_STR";
            Description = "Setting for the enablement of NGG pipeline compiles, if possible.\r\n
                           0x0 - Disabled\r\n
                           0x1 - Enabled for all supported internal pipelines only\r\n
                           0x2 - Enabled for all supported external pipelines only\r\n
                           0x4 - Enabled for any pipelines where the client has requested implicit primitive shader.\r\n
                           0x7 - Enabled for all pipeline types";
            VariableName = "nggMode";
            VariableType = "Gfx9NggMode";
            VariableDefault = "Gfx9NggDisabled";
        }
        Leaf
        {
            SettingName = "Gfx9NggRegLaunchGsPrimsPerSubgrp";
            SettingType = "UINT_STR";
            Description = "Number of GS Prims Per Subgroup for regular launch NGG.";
            VariableName = "nggRegLaunchGsPrimsPerSubgrp";
            VariableType = "uint32";
            VariableDefault = "63";
        }
        Leaf
        {
            SettingName = "Gfx9NggFastLaunchWavesPerSubgrp";
            SettingType = "UINT_STR";
            Description = "Target number of NGG waves per subgroup when running with fast launch NGG.\r\n
                           Max of 4 waves per subgroup.";
            VariableName = "idealNggFastLaunchWavesPerSubgrp";
            VariableType = "uint32";
            VariableDefault = "4";
        }
        Leaf
        {
            SettingName = "Gfx9NggLateAllocGs";
            SettingType = "UINT_STR";
            Description = "Controls the value for late-alloc GS for NGG pipelines. Can be no more than 127.";
            VariableName = "nggLateAllocGs";
            VariableType = "uint32";
            VariableDefault = "127";
        }
        Leaf
        {
            SettingName = "Gfx9NggDisableBackfaceCulling";
            SettingType = "BOOL_STR";
            Description = "If true, disables backface culling for all NGG pipelines. For quality testing purposes\r\n
                           only.";
            VariableName = "nggDisableBackfaceCulling";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9NggEnableFrustumCulling";
            SettingType = "BOOL_STR";
            Description = "If true, enables frustum culling for all NGG pipelines. For quality testing purposes\r\n
                           only.";
            VariableName = "nggEnableFrustumCulling";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9NggEnableSmallPrimFilter";
            SettingType = "BOOL_STR";
            Description = "If true, enables small primitive filter culling for all NGG pipelines. For quality\r\n
                           testing purposes only.";
            VariableName = "nggEnableSmallPrimFilter";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9NggEnableFasterLaunchRate";
            SettingType = "BOOL_STR";
            Description = "If true, enables faster launch rate for all NGG pipelines. For quality testing purposes\r\n
                           only.";
            VariableName = "nggEnableFasterLaunchRate";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9EnableOrderedIdMode";
            SettingType = "BOOL_STR";
            Description = "If true, enables VGT_SHADER_STAGES_EN::ORDERED_ID_MODE.\r\n
                           Only applies to NGG piplines.";
            VariableName = "enableOrderedIdMode";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "NggFastLaunchPipelineHash";
            SettingType = "HEX64_STR";
            Description = "64-bits of the hash of the lone Pipeline to enable NGG fast launch.";
            VariableName = "nggFastLaunchPipelineHash";
            VariableType = "uint64";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "NggVertexReusePipelineHash";
            SettingType = "HEX64_STR";
            Description = "64-bits of the hash of the lone Pipeline to enable NGG vertex reuse.";
            VariableName = "nggVertexReusePipelineHash";
            VariableType = "uint64";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9NggRingSize";
            SettingType = "UINT_STR";
            Description = "Controls how many instances of the NGG shader-data tables will be contained in the ring buffer\r\n
                           managed by Universal Command Buffers. At most, the constant engine will be able to get that many draws\r\n
                           ahead of the draw engine. This must be either zero, or divisible by four. If zero, any pipeline which\r\n
                           requires NGG will fail to compile because no SRD table is present.";
            VariableName = "nggRingSize";
            VariableType = "uint32";
            VariableDefault = "32";
        }
    }
    Node = "PBB and DFSM"
    {
        Leaf
        {
            SettingName = "Gfx9DeferredBatchBinMode";
            SettingType = "UINT_STR";
            Description = "Controls whether or not deferred batch binning is enabled\r\n
                               0 : Batch binning always disabled\r\n
                               1 : Use custom bin sizes\r\n
                               2 : Optimal\r\n";
            VariableName  = "binningMode";
            VariableType = "Gfx9BinningMode";
            VariableDefault = "Gfx9DeferredBatchBinAccurate";
        }
        Leaf
        {
            SettingName = "Gfx9CustomBatchBinSize";
            SettingType = "HEX_STR";
            Description = "Controls the custom batch bin size.  Only used when deferredBatchBinMode==1\r\n
                           High word is for x, low word is for y.  Default is 128x128.  Values must be power-of-two\r\n
                           between 16 and 512";
            VariableName  = "customBatchBinSize";
            VariableType = "uint32";
            VariableDefault = "0x00800080";
        }
        Leaf
        {
            SettingName = "Gfx9DisableBinningPsKill";
            SettingType = "BOOL_STR";
            Description = "If true, binning is disabled when the PS has a discard instruction or can be trivially\r\n
                           rejected.";
            VariableName = "disableBinningPsKill";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DisableBinningNoDb";
            SettingType = "BOOL_STR";
            Description = "If true, binning is disabled if there is no depth buffer bound.";
            VariableName = "disableBinningNoDb";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9DisableBinningBlendingOff";
            SettingType = "BOOL_STR";
            Description = "If true, binning is disabled if blending is disabled or blending does not require the\r\n
                           destination color to be read.";
            VariableName = "disableBinningBlendingOff";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9BinningMaxAllocCountLegacy";
            SettingType = "UINT_STR";
            Description = "Maximum amount of parameter storage per batch when not using NGG.\r\n
                           Units are parameter cache lines divided by two. The maximum is value 128.\r\n
                           Zero means calculate an optimal value based on the hardware configuration.";
            VariableName  = "binningMaxAllocCountLegacy";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9BinningMaxAllocCountNggOnChip";
            SettingType = "UINT_STR";
            Description = "Maximum amount of parameter storage per batch when using NGG with the on-chip parameter cache.\r\n
                           Units are parameter cache lines divided by two.\r\n
                           Zero means calculate an optimal value based on the hardware configuration.";
            VariableName  = "binningMaxAllocCountNggOnChip";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9BinningMaxPrimPerBatch";
            SettingType = "UINT_STR";
            Description = "Maximum number of primitives per batch. The maximum value is 1024.";
            VariableName  = "binningMaxPrimPerBatch";
            VariableType = "uint32";
            VariableDefault = "1024";
        }
        Leaf
        {
            SettingName = "Gfx9BinningContextStatesPerBin";
            SettingType = "UINT_STR";
            Description = "Maximum number of context rolls before breaking a batch. The maximum value is 6.";
            VariableName  = "binningContextStatesPerBin";
            VariableType = "uint32";
            VariableDefault = "1";
        }
        Leaf
        {
            SettingName = "Gfx9BinningPersistentStatesPerBin";
            SettingType = "UINT_STR";
            Description = "Maximum number of persistent states per batch. The maximum value is 31.";
            VariableName  = "binningPersistentStatesPerBin";
            VariableType = "uint32";
            VariableDefault = "1";
        }
        Leaf
        {
            SettingName = "Gfx9BinningFpovsPerBatch";
            SettingType = "UINT_STR";
            Description = "Maximum number of FPOV tokens allowed per batch. Zero means no limit.";
            VariableName  = "binningFpovsPerBatch";
            VariableType = "uint32";
            VariableDefault = "63";
        }
        Leaf
        {
            SettingName = "Gfx9BinningOptimalBinSelection";
            SettingType = "BOOL_STR";
            Description = "Value for the PA_SC_BINNER_CNTL_1::OPTIMAL_BIN_SELECTION register field.";
            VariableName  = "binningOptimalBinSelection";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9BinningDisableBinningAppendConsume";
            SettingType = "BOOL_STR";
            Description = "If true, disable Binning when the PS uses UAV append or consume";
            VariableName = "disableBinningAppendConsume";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DisableDfsm";
            SettingType = "BOOL_STR";
            Description = "If true, DFSM is disabled.";
            VariableName = "disableDfsm";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9DisableDfsmPsUav";
            SettingType = "BOOL_STR";
            Description = "If true, DFSM is disabled when the pixel shader uses UAVs or ROVs.";
            VariableName = "disableDfsmPsUav";
            VariableType = "bool";
            VariableDefault = "true";
        }
    }
    Node = "Prefetching (L2 Cache Warming)"
    {
        Leaf
        {
            SettingName = "ShaderPrefetchMethod";
            SettingType = "UINT_STR";
            Description = "Select method of shader prefetching:\r\n\r\n
                           0: CP DMA (primes UTCL2 and TCC)\r\n
                           1: PRIME_UTCL2 (primes the UTCL2)\r\n";
            VariableName = "shaderPrefetchMethod";
            VariableType = "PrefetchMethod";
            VariableDefault = "PrefetchCpDma";
        }
        Leaf
        {
            SettingName = "Gfx9PrefetchCommandBuffers";
            SettingType = "UINT_STR";
            Description = "Controls whether CP command buffers are prefetched into the Gfx L2.\r\n
                           0: Gfx9PrefetchCommandsDisabled\r\n
                           1: Gfx9PrefetchCommandsBuildInfo\r\n
                           2: Gfx9PrefetchCommandsForceAllDe\r\n
                           3: Gfx9PrefetchCommandsForceAllDeAce";
            VariableName = "prefetchCommandBuffers";
            VariableType = "Gfx9PrefetchCommands";
            VariableDefault = "Gfx9PrefetchCommandsBuildInfo";
        }
    }
    Node = "Texture Filtering"
    {
        Leaf
        {
            SettingName = "Gfx9AnisoFilterOptEnabled";
            SettingType = "BOOL_STR";
            Description = "Controls whether anisotropic filtering optimizations are enabled.";
            VariableName = "anisoFilterOptEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9CeilingLogicEnabled";
            SettingType = "BOOL_STR";
            Description = "Controls whether the round-up logic for samplers is enabled.";
            VariableName = "samplerCeilingLogicEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx9PrecisionFixEnabled";
            SettingType = "BOOL_STR";
            Description = "Controls whether rounding of values coming out of the normalizer is enabled.";
            VariableName = "samplerPrecisionFixEnabled";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx9SamplerPerfMip";
            SettingType = "UINT_STR";
            Description = "Controls the value of the PERF_MIP field in Sampler SRD's.";
            VariableName = "samplerPerfMip";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9SamplerAnisoThreshold";
            SettingType = "UINT_STR";
            Description = "Controls the value of the anisotropy threshold for Sampler SRD's.";
            VariableName = "samplerAnisoThreshold";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9SamplerAnisoBias";
            SettingType = "UINT_STR";
            Description = "Controls the value of the anisotropy bias for Sampler SRD's.";
            VariableName = "samplerAnisoBias";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx9SamplerSecAnisoBias";
            SettingType = "UINT_STR";
            Description = "Controls the value of the secondary anisotropy bias for Sampler SRD's.";
            VariableName = "samplerSecAnisoBias";
            VariableType = "uint32";
            VariableDefault = "0";
        }
    }
    Node = "Hardware Workarounds"
    {
        Leaf
        {
            SettingName = "WaWrite1xAASampleLocationsToZero";
            SettingType = "BOOL_STR";
            Description = "Controls whether the workaround waWrite1xAASampleLocationsToZero is active.
                           \r\nFALSE:   Forces the workaround off.
                           \r\nTRUE:    Forces the workaround on.
                           \r\nNot Set: Allows the driver to decide, based on Chip ID.";
            VariableName = "waWrite1xAASampleLocationsToZero";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaColorCacheControllerInvalidEviction";
            SettingType = "BOOL_STR";
            Description = "The overwrite combiner marks something as overwritten even if there are ensuing
                           quads to the same sector that need dest";
            VariableName = "waColorCacheControllerInvalidEviction";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaOverwriteCombinerTargetMaskOnly";
            SettingType = "BOOL_STR";
            Description = "The overwrite combiner takes only the target mask into consideration while deciding
                           to overwrite combine whereas the other parts of the CB decide on shader mask and
                           target mask. This discrepancy may lead to the overwrite combiner incorrectly signaling
                           a read optimization when shader and target mask are different";
            VariableName = "waOverwriteCombinerTargetMaskOnly";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaDisableHtilePrefetch";
            SettingType = "BOOL_STR";
            Description = "Controls if hTile prefetch is disbled.";
            VariableName = "waDisableHtilePrefetch";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaMiscPopsMissedOverlap";
            SettingType = "BOOL_STR";
            Description = "Controls if STALLED_POPS is used or not.";
            VariableName = "waMiscPopsMissedOverlap";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaMiscScissorRegisterChange";
            SettingType = "BOOL_STR";
            Description = "Controls if whenever a context roll is detected whether the scissor registers will be\r\n
                           rewritten.";
            VariableName = "waMiscScissorRegisterChange";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaMiscPsFlushScissorChange";
            SettingType = "BOOL_STR";
            Description = "Controls if a PS_PARTIAL_FLUSH is used whenever the scissor top-left or bottom-right\r\n
                           registers change.";
            VariableName = "waMiscPsFlushScissorChange";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaHtilePipeBankXorMustBeZero";
            SettingType = "BOOL_STR";
            Description = "If set, hTile buffers support non-zero pipe-bank xor values.";
            VariableName = "waHtilePipeBankXorMustBeZero";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaDisableDfsmWithEqaa";
            SettingType = "BOOL_STR";
            Description = "If set, DFSM will be disabled when EQAA surfaces are bound to the DB";
            VariableName = "waDisableDfsmWithEqaa";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaLegacyTessToNggVgtFlush";
            SettingType = "BOOL_STR";
            Description = "If set, a VGT_FLUSH event will be inserted when the transition from a legacy tessellation\r\n
                           pipeline (with no user GS) to an NGG pipeline is detected.";
            VariableName = "waLegacyTessToNggVgtFlush";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaNggWdPageFault";
            SettingType = "BOOL_STR";
            Description = "If set, when the last draw in a command buffer is an NGG draw, a dummy draw (draw with 0\r\n
                           verts will be inserted into the postamble to put the hardware back into legacy pipeline\r\n
                           state";
            VariableName = "waNggWdPageFault";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaLegacyToNggVsPartialFlush";
            SettingType = "BOOL_STR";
            Description = "If set, a VS_PARTIAL_FLUSH event will be inserted when a transition from a legacy\r\n
                           pipeline to an NGG pipeline is detected.";
            VariableName = "waLegacyToNggVsPartialFlush";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaDisable24BitHWFormatForTCCompatibleDepth";
            SettingType = "BOOL_STR";
            Description = "If set PAL will not set 24_8 hw format for 24-32bit converted depth surfaces, this will\r\n
                           fix fast clear expansion with TC compatible surfaces (but also return incorrect\r\n
                           unclamped border color.)";
            VariableName = "waDisable24BitHWFormatForTCCompatibleDepth";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaDummyZpassDoneBeforeTs";
            SettingType = "BOOL_STR";
            Description = "On Gfx9, the DB can delay tile write requests in such a way that its pending write ack\r\n
                           counters can underflow while processing EOP timestamps. The workaround is to issue a\r\n
                           ZPASS_DONE event before each timestamp event because it will add pending writes which\r\n
                           are lower priority than the tile writes so they will fence the delayed writes.\r\n
                           Defaults to TRUE for Gfx9, FALSE for others.";
            VariableName = "waDummyZpassDoneBeforeTs";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "WaMetaAliasingFixEnabled";
            SettingType = "BOOL_STR";
            Description = "On Gfx9, the meta-addressing equation can theoretically map multiple pixels to the same\r\n
                           This fix prevents that from happening.  Meta-equation generated by driver must match the\r\n
                           meta equation as generated by the silicon.  Products that do not have the fix have no\r\n
                           HW configurations that expose the problem.";
            VariableName = "waMetaAliasingFixEnabled";
            VariableType = "bool";
            VariableDefault = "true";
        }
    }
}

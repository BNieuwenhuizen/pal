/*
 *******************************************************************************
 *
 * Copyright (c) 2013-2017 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

HWL = "Gfx6";
DefaultScope = "PrivatePalGfx6Key";

DefineEnum = "'CsSimdDestCntlMode': ('CsSimdDestCntlDefault', '0'),
                                    ('CsSimdDestCntlForce1',  '1'),
                                    ('CsSimdDestCntlForce0',  '2')";

DefineEnum = "'CpDmaAlignmentMode':  ('CpDmaAlignmentDefault', 'sizeof(uint32)'),
                                     ('CpDmaAlignmentOptimal', '32')";

DefineEnum = "'PrefetchMethod': ('PrefetchCpDma', '0')";

DefineEnum = "'Gfx7OffchipLdsBufferSize': ('Gfx7OffchipLdsBufferSize8192', '0'),
                                          ('Gfx7OffchipLdsBufferSize4096', '1'),
                                          ('Gfx7OffchipLdsBufferSize2048', '2'),
                                          ('Gfx7OffchipLdsBufferSize1024', '3')";

DefineEnum = "'Gfx8DecompressMask': ('Gfx8DecompressDcc',       '0x00000001'),
                                    ('Gfx8DecompressHtile',     '0x00000002'),
                                    ('Gfx8DecompressFmask',     '0x00000004'),
                                    ('Gfx8DecompressFastClear', '0x00000008')";

DefineEnum = "'Gfx8TcComaptDbFlushWorkaround': ('Gfx8TcCompatDbFlushWaNever',  '0x00000000'),
                                               ('Gfx8TcCompatDbFlushWaNormal', '0x00000001'),
                                               ('Gfx8TcCompatDbFlushWaAlways', '0x00000002')";

DefineEnum = "'Gfx8FastClearTcCompatSurfs': ('Gfx8FastClearAllTcCompatColorSurfsNever', '0x00000000'),
                                            ('Gfx8FastClearAllTcCompatColorSurfsNoAa',  '0x00000001'),
                                            ('Gfx8FastClearAllTcCompatColorSurfsMsaa',  '0x00000002')";

DefineEnum = "'Gfx8TcCompatibleResolveDst': ('Gfx8TcCompatibleResolveDstDepthOnly',       '0x00000001'),
                                            ('Gfx8TcCompatibleResolveDstStencilOnly',     '0x00000002'),
                                            ('Gfx8TcCompatibleResolveDstDepthAndStencil', '0x00000004')";

DefineEnum = "'Gfx8CheckMetaDataFetchFromStartMip': ('Gfx8CheckMetaDataFetchFromStartMipDepthStencil', '0x00000001'),
                                                    ('Gfx8CheckMetaDataFetchFromStartMipColorTarget',  '0x00000002')";

DefineEnum = "'Gfx8UseDcc': ('Gfx8UseDccSingleSample',          '0x00000001'),
                            ('Gfx8UseDccSrgb',                  '0x00000002'),
                            ('Gfx8UseDccNonTcCompatShaderRead', '0x00000004'),
                            ('Gfx8UseDccPrt',                   '0x00000008'),
                            ('Gfx8UseDccMultiSample2x',         '0x00000010'),
                            ('Gfx8UseDccMultiSample4x',         '0x00000020'),
                            ('Gfx8UseDccMultiSample8x',         '0x00000040'),
                            ('Gfx8UseDccEqaa',                  '0x00000080')";

DefineEnum = "'Gfx7OutOfOrderPrimMode': ('Gfx7OutOfOrderPrimDisable',    '0'),
                                        ('Gfx7OutOfOrderPrimSafe',       '1'),
                                        ('Gfx7OutOfOrderPrimAggressive', '2'),
                                        ('Gfx7OutOfOrderPrimAlways',     '3')";

Node = "Hardware Layers"
{
    Node = "General"
    {
        Leaf
        {
            SettingName = "Gfx6CpDmaSrcAlignment";
            SettingType = "UINT_STR";
            Description = "Source address/copy size alignment in bytes for CP DMA.\r\n
                           The default value is 4, and 32 for better performance on certain GPUs having a particular\r\n
                           hardware bug";
            VariableName = "cpDmaSrcAlignment";
            VariableType = "uint32";
            VariableDefault = "CpDmaAlignmentDefault";
        }
        Leaf
        {
            SettingName = "Gfx6DisableBorderColorPaletteBinds";
            SettingType = "BOOL_STR";
            Description = "Disables binding of border color palettes, and forces any samplers created to use a\r\n
                           transparent black color. ";
            VariableName = "disableBorderColorPaletteBinds";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6ForceOcclusionQueryResult";
            SettingType = "BOOL_STR";
            Description = "Forcing the occlusion query result will disable occlusion queries\r\n
                           and use the result value from the setting ForceOcclusionQueryResultValue.";
            VariableName = "forceOcclusionQueryResult";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6ForceOcclusionQueryResultValue";
            SettingType = "UINT_STR";
            Description = "Forces Occlusion queries to return this value if ForceOcclusionQueryResult is enabled.";
            VariableName = "forceOcclusionQueryResultValue";
            VariableType = "uint32";
            VariableDefault = "1";
        }
    }
    Node = "Graphics Pipelines"
    {
        Leaf
        {
            SettingName = "Gfx6PrimgroupSize";
            SettingType = "UINT_STR";
            Description = "Number of primitives sent to one VGT before switching to the next.\r\n
                           Valid range is 1-65536, values larger than 256 are expected to hurt
                           performance.\r\nThis setting only affects non-tessellation pipelines.";
            VariableName = "primGroupSize";
            VariableType = "uint32";
            VariableDefault = "128";
        }
        Leaf
        {
            SettingName = "Gfx6DynamicPrimgroupEnable";
            SettingType = "BOOL_STR";
            Description = "When this is enabled, draws using VS/PS pipelines will ignore Gfx6PrimgroupSize and select
                          an optimal primitive group size based on a sliding window of previous draws.";
            VariableName = "dynamicPrimGroupEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6DynamicPrimgroupMin";
            SettingType = "UINT_STR";
            Description = "The lower limit for the dynamic primitive group size.";
            VariableName = "dynamicPrimGroupMin";
            VariableType = "uint32";
            VariableDefault = "32";
        }
        Leaf
        {
            SettingName = "Gfx6DynamicPrimgroupMax";
            SettingType = "UINT_STR";
            Description = "The upper limit for the dynamic primitive group size.";
            VariableName = "dynamicPrimGroupMax";
            VariableType = "uint32";
            VariableDefault = "128";
        }
        Leaf
        {
            SettingName = "Gfx6DynamicPrimgroupStep";
            SettingType = "UINT_STR";
            Description = "The dynamic primitive group size is limited to multiples of this value.\r\n
                           This must be a power of two.";
            VariableName = "dynamicPrimGroupStep";
            VariableType = "uint32";
            VariableDefault = "32";
        }
        Leaf
        {
            SettingName = "Gfx6DynamicPrimgroupWindowSize";
            SettingType = "UINT_STR";
            Description = "The number of previous draws to examine when selecting a new primitive group size.";
            VariableName = "dynamicPrimGroupWindowSize";
            VariableType = "uint32";
            VariableDefault = "32";
        }
        Leaf
        {
            SettingName = "Gfx6SwitchVgtOnDraw";
            SettingType = "BOOL_STR";
            Description = "If true, the HW will alternate VGT's between draws rather than between
                           \r\nsets of primitives within a draw. True is safer, but less performant.";
            VariableName = "switchVgtOnDraw";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6EsGsRatio";
            SettingType = "UINT_STR";
            Description = "Provides an approximation for the ratio between ES threads and GS threads
                           being launched. ES uses more threads because ES runs per-Vertex and the
                           GS runs per-Primitive.";
            VariableName = "esGsRatio";
            VariableType = "uint32";
            VariableDefault = "4";
        }
        Leaf
        {
            SettingName = "Gfx6VsForcePartialWave";
            SettingType = "BOOL_STR";
            Description = "If true, forces the VGT to issue a VS wave as soon as a primgroup is
                           finished.";
            VariableName = "vsForcePartialWave";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6VsHalfPackThreshold";
            SettingType = "UINT_STR";
            Description = "Load half-packed VS waves, forcing them to use half as much space in the
                           \r\nparam cache at the expense of inefficient use of ALU resources, if
                           \r\nthe export count is >= this threshold. This can help performance in
                           \r\nsome cases.";
            VariableName = "vsHalfPackThreshold";
            VariableType = "uint32";
            VariableDefault = "16";
        }
        Leaf
        {
            SettingName = "Gfx6EsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-ES stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-ES prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "esCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6GsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-GS stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-GS prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "gsCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6VsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-VS stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-VS prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "vsCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6PsCuGroupEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, the HW-PS stage will prefer to send a wave to each SIMD in a CU
                           \r\nbefore moving to the next enabled CU. If false, HW-PS prefers to send
                           \r\nonly one wave to each CU before moving to the next enabled CU.";
            VariableName = "psCuGroupEnabled";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6TessFactorBufferSizePerSe";
            SettingType = "UINT_STR";
            Description = "Controls the size of the tess-factor buffer. This size is per-SE, and
                           measured in DWORDs.";
            VariableName = "tessFactorBufferSizePerSe";
            VariableType = "uint32";
            VariableDefault = "0x1000";
        }
        Leaf
        {
            SettingName = "Gfx6TessWalkPattern";
            SettingType = "UINT_STR";
            Description = "Vertex walking pattern for tessellation:\r\n
                           0: (default) Donut walking pattern for optimal reuse.\r\n
                           1: Single-ring walking pattern, has suboptimal reuse.";
            VariableName = "disableTessDonutWalkPattern";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6MaxTessFactor";
            SettingType = "FLOAT_STR";
            Description = "Clamps the maximum tessellation factor. Default is 64.0.";
            VariableName = "maxTessFactor";
            VariableType = "float";
            VariableDefault = "64.0f";
        }
        Leaf
        {
            SettingName = "Gfx6NumTessPatchesPerThreadGroup";
            SettingType = "UINT_STR";
            Description = "Controls the number of patches-per-thread-group to run when tessellation
                           is enabled. This value is normally limited by hardware resources (LDS,
                           TFBuffer, Threads).\r\n
                           - Setting to 1 will always work, but is slowest.\r\n
                           - Setting to 0 will allow the driver to choose the optimal value.\r\n
                           - Any other value will be used (clamped based on HW resources).\r\n
                           Offchip Tess rounds this to the nearest multiple of four.";
            VariableName = "numTessPatchesPerTg";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6NumOffchipLdsBuffers";
            SettingType = "UINT_STR";
            Description = "Controls the number of LDS buffers used for offchip tessellation:
                           \r\n0:           Disables offchip tessellation.
                           \r\nGfx6:  1->126: Number of offchip tessellation buffers.
                           \r\nGfx7+: 1->508: Number of offchip tessellation buffers.";
            VariableName = "numOffchipLdsBuffers";
            VariableType = "uint32";
            VariableDefault = "508";
        }
        Leaf
        {
            SettingName = "Gfx6UseMaxOffchipLdsBuffers";
            SettingType = "BOOL_STR";
            Description = "If true, offchip tessellation will always use the maximum number of
                           LDS buffers possible (based on Chip ID).";
            VariableName = "useMaxOffchipLdsBuffers";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6TessDsWavesPerSimdOverflow";
            SettingType = "UINT_STR";
            Description = "Controls VGT_TF_PARAM::NUM_DS_WAVES_PER_SIMD for offchip tessellation.
                           \r\nSets how many DS wavefronts are sent to the same SIMD before
                           overflowing to other SIMDs to use offchip LDS data.\r\n
                           \r\n0->15: Number of DS waves (3-4 is recommended).\r\n
                           When this is 0, the HS and DS can be optimized to force all waves to go
                           off-chip which saves LDS space and the logic to choose on-chip or off-chip.";
            VariableName = "dsWavesPerSimdOverflow";
            VariableType = "uint32";
            VariableDefault = "4";
        }
        Leaf
        {
            SettingName = "Gfx6TessOffchipTfDegree";
            SettingType = "FLOAT_STR";
            Description = "Controls the tessellation factor for writing to offchip LDS in the HS.
                           \r\nLower values send more data offchip. Writing to offchip data incurs
                           overhead and is intended for higher Tess-Factors.";
            VariableName = "offchipTfDegree";
            VariableType = "float";
            VariableDefault = "4.0f";
        }
        Leaf
        {
            SettingName = "Gfx6OffChipHsSkipDataCopyNullPatch";
            SettingType = "BOOL_STR";
            Description = "Enables SC optimization to skip copying data from HS for null patches\r\n";
            VariableName = "gfx6OffChipHsSkipDataCopyNullPatch";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6GfxMaxWavesPerCu";
            SettingType = "UINT_STR";
            Description = "Controls the WAVE_LIMIT field in the SPI_SHADER_PGM_RSRC3_*S__CI__VI register;\r\n
                           note that it is specified per-CU rather than per-SH for convenience.\r\n
                           If non-zero, it limits the number of waves in flight in each compute unit.\r\n
                           Must be no greater than 40.";
            VariableName = "gfxMaxWavesPerCu";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6LsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided LS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for LS waves.\r\n";
            VariableName = "lsCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
        Leaf
        {
            SettingName = "Gfx6EsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided ES-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for ES waves.\r\n";
            VariableName = "esCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
        Leaf
        {
            SettingName = "Gfx6GsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided GS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for GS waves.\r\n";
            VariableName = "gsCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
        Leaf
        {
            SettingName = "Gfx6VsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided VS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for VS waves.\r\n";
            VariableName = "vsCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
        Leaf
        {
            SettingName = "Gfx6PsCuEnLimitMask";
            SettingType = "HEX_STR";
            Description = "This mask is AND-ed with the driver-decided PS-specific CU_EN mask to further allow\r\n
                           limiting of enabled CUs for PS waves.\r\n";
            VariableName = "psCuEnLimitMask";
            VariableType = "uint32";
            VariableDefault = "0xffffffff";
        }
    }
    Node = "Compute Pipelines"
    {
        Leaf
        {
            SettingName = "Gfx6CsMaxWavesPerCu";
            SettingType = "UINT_STR";
            Description = "Controls the WAVES_PER_SH field in the COMPUTE_RESOURCE_LIMITS register;\r\n
                           note that it is specified per-CU rather than per-SH for convenience.\r\n
                           If non-zero, it limits the number of waves in flight in each compute unit.\r\n
                           Must be no greater than 40.";
            VariableName = "csMaxWavesPerCu";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6CsLockThreshold";
            SettingType = "UINT_STR";
            Description = "Controls the LOCK_THRESHOLD field in the COMPUTE_RESOURCE_LIMITS register.
                           \r\nCS per-SH low threshold for locking. Granularity 4, 0 disables locking.";
            VariableName = "csLockThreshold";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6CsSimdDestCntl";
            SettingType = "UINT_STR";
            Description = "Controls the SIMD_DEST_CNTL field of the COMPUTE_RESOURCE_LIMITS register.
                           \r\nBy default, this flag is calulated based on the number of waves in the
                           \r\ndispatch. If the number of waves is a multiple of 4, this flag is set,
                           \r\notherwise it is cleared.
                           \r\n0 - Keeps the default SIMD_DEST_CNTL behavior.
                           \r\n1 - Forces SIMD_DEST_CNTL to 1.
                           \r\n2 - Forces SIMD_DEST_CNTL to 0.";
            VariableName = "csSimdDestCntl";
            VariableType = "CsSimdDestCntlMode";
            VariableDefault = "CsSimdDestCntlDefault";
        }
    }
    Node = "Prefetching (L2 Cache Warming)"
    {
        Leaf
        {
            SettingName = "ShaderPrefetchMethod";
            SettingType = "UINT_STR";
            Description = "Select method of shader prefetching:\r\n\r\n
                           0: CP DMA\r\n";
            VariableName = "shaderPrefetchMethod";
            VariableType = "PrefetchMethod";
            VariableDefault = "PrefetchCpDma";
        }
    }
    Node = "Texture Filtering"
    {
        Leaf
        {
            SettingName = "Gfx6AnisoFilterOptEnabled";
            SettingType = "BOOL_STR";
            Description = "Controls whether anisotropic filtering optimizations are enabled.";
            VariableName = "anisoFilterOptEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6CeilingLogicEnabled";
            SettingType = "BOOL_STR";
            Description = "Controls whether the round-up logic for samplers is enabled.";
            VariableName = "samplerCeilingLogicEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6PrecisionFixEnabled";
            SettingType = "BOOL_STR";
            Description = "Controls whether rounding of values coming out of the normalizer is enabled.";
            VariableName = "samplerPrecisionFixEnabled";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6SamplerPerfMip";
            SettingType = "UINT_STR";
            Description = "Controls the value of the PERF_MIP field in Sampler SRD's.";
            VariableName = "samplerPerfMip";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6SamplerAnisoThreshold";
            SettingType = "UINT_STR";
            Description = "Controls the value of the anisotropy threshold for Sampler SRD's.";
            VariableName = "samplerAnisoThreshold";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6SamplerAnisoBias";
            SettingType = "UINT_STR";
            Description = "Controls the value of the anisotropy bias for Sampler SRD's.";
            VariableName = "samplerAnisoBias";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6SamplerSecAnisoBias";
            SettingType = "UINT_STR";
            Description = "Controls the value of the secondary anisotropy bias for Sampler SRD's.";
            VariableName = "samplerSecAnisoBias";
            VariableType = "uint32";
            VariableDefault = "0";
        }
    }
    Node = "Color Targets"
    {
        Leaf
        {
            SettingName = "Gfx6FastColorClearEnable";
            SettingType = "BOOL_STR";
            Description = "If true, CMask will be used to support fast color clears on single
                           sampled Color Target Images.";
            VariableName = "fastColorClearEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6FastColorClearOn3DEnable";
            SettingType = "BOOL_STR";
            Description = "If true, CMask will be used to support fast color clears on single
                           sampled 3D Color Target Images.";
            VariableName = "fastColorClearOn3dEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6FmaskCompressEnable";
            SettingType = "BOOL_STR";
            Description = "If false, the FMASK_COMPRESSION_DISABLE bit of CB_COLOR_INFO for
                           Color-Target Views will be set. This field is valid on CI+ only";
            VariableName = "fmaskCompressEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6BlendOptimizationEnable";
            SettingType = "BOOL_STR";
            Description = "If true, writes the BLEND_OPT_DONT_RD_DST and BLEND_OPT_DISCARD_PIXEL
                           bits of the CB_COLOR_INFO for Blend States.";
            VariableName = "blendOptimizationsEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
    }
    Node = "Depth/Stencil"
    {
        Leaf
        {
            SettingName = "Gfx6HtileEnable";
            SettingType = "BOOL_STR";
            Description = "If true, HTile will be enabled for depth/stencil Images.";
            VariableName = "htileEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6DepthCompressEnable";
            SettingType = "BOOL_STR";
            Description = "If true, depth compression will be enabled (requires HTile).";
            VariableName = "depthCompressEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6StencilCompressEnable";
            SettingType = "BOOL_STR";
            Description = "If true, stencil compression will be enabled (requires HTile).";
            VariableName = "stencilCompressEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6LinearHtileEnable";
            SettingType = "BOOL_STR";
            Description = "If true, the Linear HTile optimization will be enabled (requires HTile).";
            VariableName = "linearHtileEnable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6DbPreloadEnable";
            SettingType = "BOOL_STR";
            Description = "If true, DB preloading will be enabled (requires HTile).";
            VariableName = "dbPreloadEnable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6DbPreloadWinEnable";
            SettingType = "BOOL_STR";
            Description = "If true, DB preload window dimensions will be used instead of the depth\r\n
                           buffer's dimensions. (requires HTile).";
            VariableName = "dbPreloadWinEnable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6DbPerTileExpClearEnable";
            SettingType = "BOOL_STR";
            Description = "If true, per-tile tracking of exp/clear will be enabled (requires HTile).";
            VariableName = "dbPerTileExpClearEnable";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6HiDepthEnable";
            SettingType = "BOOL_STR";
            Description = "If true, hierarchical depth testing will be enabled (requires HTile).";
            VariableName = "hiDepthEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6HiStencilEnable";
            SettingType = "BOOL_STR";
            Description = "If true, hierarchical stencil testing will be enabled (requires HTile).";
            VariableName = "hiStencilEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx6DbRequestSize";
            SettingType = "HEX_STR";
            Description = "Specifies the DB read request size.\r\n
                           0 = 256-bit request size.\r\n
                           1 = 512-bit request size.";
            VariableName = "dbRequestSize";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx6DbAddr5SwizzleMask";
            SettingType = "HEX_STR";
            Description = "Controls the value of DB_DEPTH_INFO.ADDR5_SWIZZLE_MASK.";
            VariableName = "dbAddr5SwizzleMask";
            VariableType = "uint32";
            VariableDefault = "1";
        }
        Leaf
        {
            SettingName = "Gfx6DbDisableColorOnValidation";
            SettingType = "BOOL_STR";
            Description = "Controls the DB_RENDER_OVERRIDE2.DISABLE_COLOR_ON_VALIDATION register field";
            VariableName = "dbDisableColorOnValidation";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx6EnableSeparateAspectMetadataInit";
            SettingType = "BOOL_STR";
            Description = "If true, HTile for depth and stencil aspects may be initialized separately";
            VariableName = "enableSeparateAspectMetadataInit";
            VariableType = "bool";
            VariableDefault = "true";
        }
    }
    Node = "Sea Islands"
    {
        Leaf
        {
            SettingName = "Gfx7VsPartialWaveWithEoiEnabled";
            SettingType = "BOOL_STR";
            Description = "If true, PARTIAL_VS_WAVE_ON will be set whenever SWITCH_ON_EOI is set.";
            VariableName = "gfx7VsPartialWaveWithEoiEnabled";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx7OffchipLdsBufferSize";
            SettingType = "UINT_STR";
            Description = "Controls the size of each offchip LDS Buffer.
                           \r\n0: 8K DWORDs.
                           \r\n1: 4K DWORDs.
                           \r\n2: 2K DWORDs.
                           \r\n3: 1K DWORDs.";
            VariableName = "gfx7OffchipLdsBufferSize";
            VariableType = "uint32";
            VariableDefault = "Gfx7OffchipLdsBufferSize8192";
        }
        Leaf
        {
            SettingName = "Gfx7LateAllocVsOnCuAlwaysOn";
            SettingType = "BOOL_STR";
            Description = "If true, SPI_SHADER_LATE_ALLOC_VS feature will be enabled on the AlwaysOn CUs basis.";
            VariableName = "gfx7LateAllocVsOnCuAlwaysOn";
            VariableType = "bool";
            VariableDefault = "false";
        }
        Leaf
        {
            SettingName = "Gfx7EnableOutOfOrderPrimitives";
            SettingType = "UINT_STR";
            Description = "Enable out-of-order primitive mode. Only available Hawaii and VI\r\n
                           parts that have more than one VGT. May cause a hang on Hawaii.\r\n
                           0 - Always Disable\r\n
                           1 - Enable when known to not affect render output\r\n
                           2 - Enable when suspected to not affect render output\r\n
                           3 - Always Enable";
            VariableName = "gfx7EnableOutOfOrderPrimitives";
            VariableType = "Gfx7OutOfOrderPrimMode";
            VariableDefault = "Gfx7OutOfOrderPrimSafe";
        }
        Leaf
        {
            SettingName = "Gfx7OutOfOrderWatermark";
            SettingType = "UINT_STR";
            Description = "The watermark value for out-of-order primitives.\r\n
                           Valid values range from 0-7 and are log(2) of the watermark.\r\n";
            VariableName = "gfx7OutOfOrderWatermark";
            VariableType = "uint32";
            VariableDefault = "7";
        }
        Leaf
        {
            SettingName = "Gfx7GsMaxLdsSize";
            SettingType = "UINT_STR";
            Description = "Maximum amount of LDS space to alloc for each on-chip\r\n
                           GS subgroup, in DWORDs. Must be 128 dword aligned.\r\n";
            VariableName = "gfx7GsMaxLdsSize";
            VariableType = "uint32";
            VariableDefault = "8 * 1024";
        }
        Leaf
        {
            SettingName = "Gfx7EnableOnchipGs";
            SettingType = "BOOL_STR";
            Description = "If true, onchip GS will be used if possible.";
            VariableName = "gfx7EnableOnchipGs";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx7GsOffChipThreshold";
            SettingType = "UINT_STR";
            Description = "If the number of GS prims per subgroup * GS\r\n
                           instance count is less than this threshold use off-chip GS.\r\n";
            VariableName = "gfx7GsOffChipThreshold";
            VariableType = "uint32";
            VariableDefault = "64";
        }
        Leaf
        {
            SettingName = "Gfx7GsPrimsPerSubGroup";
            SettingType = "UINT_STR";
            Description = "Target number of GS prims per subgroup when running with on-chip GS.\r\n";
            VariableName = "gfx7IdealGsPrimsPerSubGroup";
            VariableType = "uint32";
            VariableDefault = "64";
        }
        Leaf
        {
            SettingName = "Gfx7AvoidVgtNullPrims";
            SettingType = "BOOL_STR";
            Description = "If true, 4x prim rate will be disabled whenever a draw could cause any VGT to issue null
                           primitives.\r\nIn some cases, issuing null primitives can cause a performance drop greater
                           than the performance gain of 4x prim rate.\r\nThis cannot be enabled on ASICs that do not
                           support 4x prim rate.";
            VariableName = "gfx7AvoidVgtNullPrims";
            VariableType = "bool";
            VariableDefault = "false";
        }
    }
    Node = "Volcanic Islands"
    {
        Leaf
        {
            SettingName = "Gfx8PatchDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is active: the min tess\r\n
                           factors for each patch processed by a VGT are accumulated. When the sum\r\n
                           exceeds this threshold, the next patch is sent to a different VGT.";
            VariableName = "gfx8PatchDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "8";
        }
        Leaf
        {
            SettingName = "Gfx8DonutDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is in DONUT mode: the\r\n
                           min tess factor for each patch is tested against this threshold to determine\r\n
                           whether a patch gets split up. If the patch isn't split, it still increments\r\n
                           the accumulator for the Patch distribution factor.";
            VariableName = "gfx8DonutDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "8";
        }
        Leaf
        {
            SettingName = "Gfx8TrapezoidDistributionFactor";
            SettingType = "UINT_STR";
            Description = "Used by the hardware when distributed tessellation is in TRAPEZOID mode: the\r\n
                           min tess factor for each patch is tested against this threshold to determine\r\n
                           whether a patch gets split up. If the patch isn't split, it still increments\r\n
                           the accumulator for the Patch distribution factor.
                           \r\n Note: The Trapezoid is supported by only a few ASICs in gfxip-8+.";
            VariableName = "gfx8TrapezoidDistributionFactor";
            VariableType = "uint32";
            VariableDefault = "8";
        }
        Leaf
        {
            SettingName = "Gfx8UseDcc";
            SettingType = "HEX_STR";
            Description = "Bitmask of cases where DCC (delta color compression) surfaces will be used\r\n
                               Single sample render targets:   0x00000001 \r\n
                               SRGB numeric format images:     0x00000002 \r\n
                               Non-TC compatible shader read:  0x00000004 \r\n
                               Partially resident textures:    0x00000008 \r\n
                               2x multisample render targets:  0x00000010 \r\n
                               4x multisample render targets:  0x00000020 \r\n
                               8x multisample render targets:  0x00000040 \r\n
                               EQAA render targets:            0x00000080 \r\n";
            VariableName = "gfx8UseDcc";
            VariableType = "uint32";
            VariableDefault = "0x000000f3";
        }
        Leaf
        {
            SettingName = "Gfx8AlwaysDecompress";
            SettingType = "HEX_STR";
            Description = "Controls whether the specified decompress / expand / eliminate operations will
                           always occur when requested\r\n
                               DCC decompress      : 0x00000001\r\n
                               depth expand        : 0x00000002\r\n
                               fMask decompress    : 0x00000004\r\n
                               fast clear eliminate: 0x00000008\r\n";
            VariableName = "gfx8AlwaysDecompress";
            VariableType = "uint32";
            VariableDefault = "0";
        }
        Leaf
        {
            SettingName = "Gfx8RbPlusEnable";
            SettingType = "BOOL_STR";
            Description = "If true, RbPlus will be enabled for ASIC of RbPlus capability.";
            VariableName = "gfx8RbPlusEnable";
            VariableType = "bool";
            VariableDefault = "true";
        }
        Leaf
        {
            SettingName = "Gfx8FastClearAllTcCompatColorSurfs";
            SettingType = "UINT_STR";
            Description = "Bitfield to enable fast clears for all TC compatible color surfaces regardless
                           of the clear color.\r\n
                               0x00000000 : non-standard clear colors will use graphics engine\r\n
                               0x00000001 : non-AA images will always use fast clears\r\n
                               0x00000002 : MSAA images will always use fast clears";
            VariableName = "gfx8FastClearAllTcCompatColorSurfs";
            VariableType = "uint32";
            VariableDefault = "0x3";
        }
        Leaf
        {
            SettingName = "Gfx8CheckMetaDataFetchFromStartMip";
            SettingType = "HEX_STR";
            Description = "Image view srd selects zero-th mip address of both surface and meta data as base\r\n
                           address. It is possible that meta data of zero-th mip has not been initialized if\r\n
                           perSubResInit=1. It is generally correct but when mip interleave exists, child mips\r\n
                           might be non-tc-compatible and just fetching 'expanded' meta data value interleaved in\r\n
                           zero-th mip (since we were deciding whether meta data fetch shall be enabled based on\r\n
                           zero-th mip), but meta data values in zero-th mip not yet intialized. So we decide\r\n
                           whether meta data fetch should be enabled based on start mip in view range rather than\r\n
                           zero-th mip. If start mip is tc-compatible, it's safe for non-tc-compatible child mips\r\n
                           to fetch 'expanded' meta data value interleaved in meta data of start mip, since start\r\n
                           mip must be in valid shader read state thus meta data already intialized.
                           Bitmask of cases whether meta data fetch shall be enabled based on start mip rather than\r\n
                           zero-th mip.
                               Depth-stencil target: 0x00000001 \r\n
                               Color target        : 0x00000002 \r\n";
            VariableName = "gfx8CheckMetaDataFetchFromStartMip";
            VariableType = "uint32";
            VariableDefault = "0x3";
        }
        Leaf
        {
            SettingName = "Gfx8IgnoreMipInterleave";
            SettingType = "BOOL_STR";
            Description = "For tc-compatible mip chian, when mip interleave exists on gfx8, the first affected\r\n
                           mip is allowed to be tc-compatible but memset fast clear is not allowed, while\r\n
                           following child mips will be non-tc-compatible. When tc reads across mipLevels,\r\n
                           by imageViewSrd combined of startSubRes+mipLevels (in veiw range), only one\r\n
                           pair of COMPRESSION_EN__VI/META_DATA_ADDRESS__VI could be set, thus all the\r\n
                           mip chain might be regarded as tc-compatible with respect to the start mip,\r\n
                           as a result, the non-tc-compatible child mipLevels will reference htile\r\n
                           interleaved in the start mip (although interleaved htile reserved for child mip\r\n
                           will always be in expanded value). Once mipInterleave detected, we will pad\r\n
                           htile size of all child mips into htile of first affected mip, since tc\r\n
                           reading following child mip might reference interleaved htile in the first affected\r\n
                           mip . We still allocate additional non-tc-compatible htile for each following\r\n
                           child mipLevel for compressed db access on itself. \r\n
                           If true, mip interleave will be ignored and no padding of child mip htile\r\n
                           will be inserted into the fisrt affectd mip\r\n.";
            VariableName = "gfx8IgnoreMipInterleave";
            VariableType = "bool";
            VariableDefault = "false";
        }
    }
    Node = "Hardware Workarounds"
    {
        Leaf
        {
            SettingName = "WaMiscGsNullPrim";
            SettingType = "BOOL_STR";
            Description = "Controls whether the GS Null Primitive workaround is active.
                           \r\nFALSE:   Forces the workaround off.
                           \r\nTRUE:    Forces the workaround on.
                           \r\nNot Set: Allows the driver to decide, based on Chip ID.";
            VariableName = "waMiscGsNullPrim";
            VariableType = "bool";
            VariableDefault = "false";
        }
    }
}

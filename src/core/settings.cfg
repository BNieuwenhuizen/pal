/*
 *******************************************************************************
 *
 * Copyright (c) 2013-2017 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

// For filtering a leaf use ISV_Whitelist = "1"; (to include) or ISV_Blacklist = "1"; (to exclude)

DefaultScope = "PrivatePalKey";

DefineEnum = "'InternalSettingScope' : ('PrivateDriverKey',  '0x0'),
                                       ('PublicPalKey',      '0x1'),
                                       ('PrivatePalKey',     '0x2'),
                                       ('PrivatePalGfx6Key', '0x3'),
                                       ('PrivatePalGfx9Key', '0x4'),
                                       ('PublicCatalystKey', '0x5')";

// Note that these enums are in priority order for loading.  Ideally, we will prefetch in the
// order data will be read as a draw/dispatch flows through the pipeline.
DefineEnum = "'PrefetchType' : ('PrefetchCs',           '0'),
                               ('PrefetchVs',           '1'),
                               ('PrefetchHs',           '2'),
                               ('PrefetchDs',           '3'),
                               ('PrefetchGs',           '4'),
                               ('PrefetchPs',           '5'),
                               ('PrefetchCopyShader',   '6'),
                               ('NumPrefetchTypes',     '7')";

DefineEnum = "'Pm4OptEnable' : ('Pm4OptDefaultEnable', '0'),
                               ('Pm4OptForceEnable',   '1'),
                               ('Pm4OptForceDisable',  '2')";

DefineEnum = "'Pm4OptMode' : ('Pm4OptModeImmediate', '0'),
                             ('Pm4OptModeFinalized', '1')";

DefineEnum = "'PipelineOptFlags' : ('OptNone',              '0x0'),
                                   ('OptTrimUnusedOutputs', '0x1')";

DefinePrivEnum = "'TileSwizzleBits': ('TileSwizzleNone',      '0x00000000'),
                                     ('TileSwizzleColor',     '0x00000001'),
                                     ('TileSwizzleDepth',     '0x00000002'),
                                     ('TileSwizzleShaderRes', '0x00000004'),
                                     ('TileSwizzleAllBits',   '0x00000007')";

DefineEnum = "'IfhMode': ('IfhModeDisabled', '0'),
                         ('IfhModePal',      '1'),
                         ('IfhModeKmd',      '2')";

DefinePrivEnum = "'PipelineLogFlags' : ('PipelineLogNone',       '0'),
                                       ('PipelineLogInternal',   '0x1'),
                                       ('PipelineLogExternal',   '0x2'),
                                       ('PipelineLogTextFormat', '0x4'),
                                       ('PipelineLogElfFormat',  '0x8'),
                                       ('PipelineLogAll',        '0xF')";

DefinePrivEnum = "'PipelineLogFilters' : ('PipelineLogFilterNone',        '0')
                                         ('PipelineLogFilterCs',          '0x01'),
                                         ('PipelineLogFilterNgg',         '0x02'),
                                         ('PipelineLogFilterGs',          '0x04'),
                                         ('PipelineLogFilterTess',        '0x08'),
                                         ('PipelineLogFilterVsPs',        '0x10')";

DefineEnum = "'CmdBufForceOneTimeSubmit' : ('CmdBufForceOneTimeSubmitDefault', '0'),
                                           ('CmdBufForceOneTimeSubmitOn',      '1'),
                                           ('CmdBufForceOneTimeSubmitOff',     '2')";

DefinePrivEnum = "'TossPointMode': ('TossPointNone',             '0'),
                                   ('TossPointAfterRaster',      '1'),
                                   ('TossPointWireframe',        '2'),
                                   ('TossPointAfterSetup',       '3'),
                                   ('TossPointDepthClipDisable', '4'),
                                   ('TossPointAfterPs',          '5'),
                                   ('TossPointSimplePs',         '6')";

DefineEnum = "'DebugOverlayLocation' : ('DebugOverlayUpperLeft',  '0'),
                                       ('DebugOverlayUpperRight', '1'),
                                       ('DebugOverlayLowerRight', '2'),
                                       ('DebugOverlayLowerLeft',  '3'),
                                       ('DebugOverlayCount',      '4')";

DefineEnum = "'TimeGraphColor' : ('BlackColor',   '0'),
                                 ('RedColor',     '1'),
                                 ('GreenColor',   '2'),
                                 ('BlueColor',    '3'),
                                 ('YellowColor',  '4'),
                                 ('CyanColor',    '5'),
                                 ('MagentaColor', '6'),
                                 ('WhiteColor',   '7')";

DefineEnum = "'CmdBufDumpMode': ('CmdBufDumpModeDisabled',      '0'),
                                ('CmdBufDumpModeText',          '1'),
                                ('CmdBufDumpModeBinary',        '2'),
                                ('CmdBufDumpModeBinaryHeaders', '3')";

DefineEnum = "'DistributionTessMode': ('DistributionTessOff',           '0'),
                                      ('DistributionTessDefault',       '1'),
                                      ('DistributionTessPatch',         '2'),
                                      ('DistributionTessDonut',         '3'),
                                      ('DistributionTessTrapezoid',     '4'),
                                      ('DistributionTessTrapezoidOnly', '5')";

DefineEnum = "'ContextRollOptimizationFlags':('OptFlagNone',        '0x00000000'),
                                             ('PadParamCacheSpace', '0x00000001')";

DefineEnum = "'Addr2Disable4kBSwizzle': ('Addr2Disable4kBSwizzleDepth',   '0x00000001'),
                                        ('Addr2Disable4kBSwizzleColor1D', '0x00000002'),
                                        ('Addr2Disable4kBSwizzleColor2D', '0x00000004'),
                                        ('Addr2Disable4kBSwizzleColor3D', '0x00000008')";

DefineEnum = "'CommandBufferPreemptionFlags': ('PreemptionDisabled',        '0'),
                                              ('UniversalEnginePreemption', '1'),
                                              ('DmaEnginePreemption',       '2')";

DefineEnum = "'Addr2PreferredSwizzleTypeSet'  : ('Addr2PreferredDefault', '0x00000000'),
                                                ('Addr2PreferredSW_Z',    '0x00000001'),
                                                ('Addr2PreferredSW_S',    '0x00000002'),
                                                ('Addr2PreferredSW_D',    '0x00000004'),
                                                ('Addr2PreferredSW_R',    '0x00000008')";

Node = "Public CCC Options"
{
    Leaf
    {
        SettingName = "TFQ";
        SettingType = "UINT_STR";
        Description = "Controls texture filtering optimizations exposed by CCC.";
        VariableName = "textureOptLevel";
        VariableType = "uint32";
        VariableDefault = "TextureFilterOptimizationsEnabled";
        SettingScope = "PublicCatalystKey";
    }
    Leaf
    {
        SettingName = "CatalystAI";
        SettingType = "UINT_STR";
        Description = "Controls app detect and image quality altering optimizations exposed by CCC.";
        VariableName = "catalystAI";
        VariableType = "uint32";
        VariableDefault = "CatalystAiEnable";
        SettingScope = "PublicCatalystKey";
    }
}

Node = "General"
{
    Leaf
    {
        SettingName = "ForcePreambleCmdStream";
        SettingType = "BOOL_STR";
        Description = "Controls whether the preamble command stream for a Queue is always\r\n
                       submitted, or skipped when the same scheduler context runs back-to-
                       back on the CP ring.\r\n
                       True:  always run the preamble cmd stream.\r\n
                       False: only run the preamble cmd stream when necessary.";
        VariableName = "forcePreambleCmdStream";
        VariableType = "bool";
        VariableDefault = "true";
    }
    Leaf
    {
        SettingName = "MaxNumCmdStreamsPerSubmit";
        SettingType = "UINT_STR";
        Description = "Controls the maximum number of command streams that can be submitted\r\n
                     at once to the KMD. Overrides the KMD maximum value if set to a value > 0.";
        VariableName = "maxNumCmdStreamsPerSubmit";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "BorderColorPaletteSizeLimit";
        SettingType = "UINT_STR";
        VariableName = "borderColorPaletteSizeLimit";
        Description = "Limit the maximum border color palette size supported by any queue.";
        VariableType = "uint32";
        VariableDefault = "4096";
        MaxVersion   = "354";
    }
    Leaf
    {
        SettingName = "RequestHighPriorityVmid";
        SettingType = "BOOL_STR";
        VariableName = "requestHighPriorityVmid";
        Description = "Request that context be created with high priority to reduce page table\r\n
                       invalidation penalties.";
        VariableType = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        SettingName = "RequestDebugVmid";
        SettingType = "BOOL_STR";
        VariableName = "requestDebugVmid";
        Description = "Request that contexts be created with a debug VMID. This allows for better\r\n
                       shader debugging by keeping the page tables valid after the context has\r\n
                       been switched out.";
        VariableType = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        SettingName = "NonlocalDestGraphicsCopyRbs";
        SettingType = "INT_STR";
        VariableName = "nonlocalDestGraphicsCopyRbs";
        Description = "Number of RBs used in graphics copy to nonlocal destination:\r\n
                       -1 means using all RBs\r\n
                        0 means driver chooses the optimal\r\n
                        Other value (from 1 to NumRbs-1) tells driver to use the exact number.";
        VariableType = "int32";
        VariableDefault = "0";
    }
    Leaf
    {
        SettingName = "IFH";
        SettingType = "INT_STR";
        Description = "Behavior of IFH (Infinitely Fast Hardware) mode.\r\n
                       See MGPU-IfhGpuMask for which ASICs are affected (default all)\r\n
                           0 - IFH is disabled \r\n
                           1 - IFH is implemented in PAL (KMD is not called) \r\n
                           2 - IFH is implemented in the KMD \r\n";
        VariableName = "ifh";
        VariableType = "IfhMode";
        VariableDefault = "IfhModeDisabled";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "IdleAfterSubmitGpuMask";
        SettingType = "HEX_STR";
        Description = "Idles after each call to grQueueSubmit for the GPU's specified by the mask.\r\n
                       If the bit is set, idle after submit for that GPU.";
        VariableName = "idleAfterSubmitGpuMask";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "TossPointMode";
        SettingType = "UINT_STR";
        Description = "Enables one of the toss point mode to help performance analysis:
                       \r\n0: Normal operation
                       \r\n1: Kill Rasterizer
                       \r\n2: Force Wireframe fill mode
                       \r\n3: Scissor-out all geometry
                       \r\n4: Force Depth-clipping disabled
                       \r\n5: Disable Color Buffer writes
                       \r\n6: Use a trivial Pixel Shader";
        VariableName = "tossPointMode";
        VariableType = "uint32";
        VariableDefault = "TossPointNone";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "ForceFixedFuncColorResolve";
        SettingType = "BOOL_STR";
        Description = "This setting forces MSAA color images, if they support FixedFunc resolves,\r\n
                       to always prefer fixed function resolves over any other Resolve Method.
                       \r\ntrue: Use fixed function resolves if possible.
                       \r\nfalse: Use client`s preferred resolve mathod.";
        VariableName  = "forceFixedFuncColorResolve";
        VariableType = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        SettingName = "UnboundDescriptorAddressLo";
        SettingType = "HEX_STR";
        Description = "Low 32-bits of the address to use for unbound descriptors. This will\r\n
                       show up in the faulting address if a page fault is triggered due to\r\n
                       an unbound descriptor in an application.\r\n
                       Deprecated as of PAL Interface Major Version #286.";
        VariableName = "unboundDescriptorAddressLo";
        VariableType = "uint32";
        VariableDefault = "0xDEADBEEF";
        MaxVersion   = "297";
    }
    Leaf
    {
        SettingName = "UnboundDescriptorAddressHi";
        SettingType = "HEX_STR";
        Description = "High 32-bits of the address to use for unbound descriptors. This will\r\n
                       show up in the faulting address if a page fault is triggered due to\r\n
                       an unbound descriptor in an application.\r\n
                       Deprecated as of PAL Interface Major Version #286.";
        VariableName = "unboundDescriptorAddressHi";
        VariableType = "uint32";
        VariableDefault = "0xDEADBEEF";
        MaxVersion   = "297";
    }
    Leaf
    {
        SettingName = "UnboundDescriptorAddress";
        SettingType = "HEX64_STR";
        Description = "64-bits of the address to use for unbound descriptors. This will\r\n
                       show up in the faulting address if a page fault is triggered due to\r\n
                       an unbound descriptor in an application.";
        VariableName = "unboundDescriptorAddress";
        VariableType = "gpusize";
        VariableDefault = "0xDEADBEEFDEADBEEF";
        MinVersion   = "298";
    }
    Leaf
    {
        SettingName = "ClearAllocatedLfb";
        SettingType = "BOOL_STR";
        Description = "The allocated local frame buffer is not cleared to 0 on linux. \r\n
                       Sometimes, application have the assumption that the linux driver will clear the framebuffer
                       just like how windows behaves. \r\n
                       Adding options but not enabled it by default to help triage similar issues.";
        VariableName = "clearAllocatedLfb";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "Addr2Disable4KbSwizzleMode";
        SettingType = "HEX_STR";
        Description = "Bitmask of surface types which should not allow 4kB swizzle modes for chips which use AddrMgr2.\r\n
                           Depth       : 0x00000001\r\n
                           Color       : 0x00000002\r\n";
        VariableName = "addr2Disable4kBSwizzleMode";
        VariableType = "uint32";
        VariableDefault = "0";
    }
    Leaf
    {
        SettingName = "OverlayReportHDR";
        SettingType = "BOOL_STR";
        Description = "Determines if the developer mode overlay will report information about HDR mode.";
        VariableName = "overlayReportHDR";
        VariableType = "bool";
        VariableDefault = "true";
    }
}
Node = "GPU Info"
{
    Leaf
    {
        SettingName = "ForcedUserDataSpillThreshold";
        SettingType = "UINT_STR";
        Description = "Controls the threshold at which user-data entries will start spilling to GPU memory.\r\n
                       Normally, the threshold is when a shader runs out of fast user-data registers. However,\r\n
                       threshold can be used to force more user-data entries to be spilled. If this value is larger\r\n
                       than the number of fast user-data registers available, this setting will have no effect\r\n
                       because that matches the default PAL behavior.  A value of zero would effectively force all\r\n
                       user-data entries to spill.";
        VariableName = "forcedUserDataSpillThreshold";
        VariableType = "uint32";
        VariableDefault = "0xFFFF";
        SettingScope = "PrivatePalKey";
    }
}
Node = "Performance"
{
    Leaf
    {
        SettingName = "WholePipelineOptimizations";
        SettingType = "HEX_STR";
        Description = "Selects which methods of whole-pipeline optimizations are enabled.\r\n
                        0x1 - Trim unused Shader outputs (which allows dead-code removal to trim
                              unused Shader inputs as well, and bubble-up to all pipeline stages).\r\n
                        \r\n
                        By default, only the removal of unused shader outputs is performed.";
        VariableName = "wholePipelineOptimizations";
        VariableType = "uint32";
        VariableDefault = "OptTrimUnusedOutputs";
    }
    Leaf
    {
        SettingName = "ForceHeapPerfToFixedValues";
        SettingType = "BOOL_STR";
        Description = "If set we will use hard-coded heap performance values instead of the usual ASIC-specific\r\n
                       values.  This setting is intended for bring-up testing as we will return zeros for all\r\n
                       performance data on unknown GPUs.  This can cause strange behavior (e.g., poor performance)\r\n
                       in some applications.";
        VariableName = "forceHeapPerfToFixedValues";
        VariableType = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        Description = "CPU read performance for local memory";
        VariableName = "cpuReadPerfForLocal";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "CPU write performance for local memory";
        VariableName = "cpuWritePerfForLocal";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU read performance for local memory";
        VariableName = "gpuReadPerfForLocal";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU write performance for local memory";
        VariableName = "gpuWritePerfForLocal";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU read performance for invisible memory";
        VariableName = "gpuReadPerfForInvisible";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU write performance for invisible memory";
        VariableName = "gpuWritePerfForInvisible";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "CPU write performance for GartUswc memory";
        VariableName = "cpuWritePerfForGartUswc";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "CPU read performance for GartUswc memory";
        VariableName = "cpuReadPerfForGartUswc";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU read performance for GartUswc memory";
        VariableName = "gpuReadPerfForGartUswc";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU write performance for GartUswc memory";
        VariableName = "gpuWritePerfForGartUswc";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "CPU read performance for GartCacheable memory";
        VariableName = "cpuReadPerfForGartCacheable";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "CPU write performance for GartCacheable memory";
        VariableName = "cpuWritePerfForGartCacheable";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU read performance for GartCacheable memory";
        VariableName = "gpuReadPerfForGartCacheable";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        Description = "GPU write performance for GartCacheable memory";
        VariableName = "gpuWritePerfForGartCacheable";
        VariableType = "float";
        SettingType  = "FLOAT_STR";
        VariableDefault = "1.0f";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "AllocationListReusable";
        SettingType = "BOOL_STR";
        Description = "Re-use allocation list across submission in Linux.\r\n
                       This will improve CPU performance of command buffer submission,\r\n
                       but will potentially cause GPU memory de-allocation to be delayed.";
        VariableName = "allocationListReusable";
        VariableType = "bool";
        VariableDefault = "true";
    }
    Leaf
    {
        SettingName = "FenceTimeoutOverride";
        SettingType = "UINT_STR";
        Description = "Timeout value to override app-specified value for fence timeouts.  Meaningless if app specified\r\n
                       zero seconds.  A value of zero here means to use the app-specified timeout value.  Usefull on HW\r\n
                       simulation where working cases can result in false timeouts.  Value specified in seconds";
        VariableName = "fenceTimeoutOverrideInSec";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "UpdateOneGpuVirtualAddress";
        SettingType = "BOOL_STR";
        Description = "If set, when calling RemapVirtualMemoryPages(), PAL will only do one unmap/map protect\r\n
                       operation at a time, instead of trying to group the operations by BaseAddress.  This affects\r\n
                       WDDM2 only.";
        VariableName = "updateOneGpuVirtualAddress";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "AlwaysResident";
        SettingType = "BOOL_STR";
        Description = "All allocations will be permanently kept resident without management by the client with \r\n
                       AddGpuMemoryReferences.  This may reduce the runtime overhead of submission on Linux, \r\n
                       but won't work properly if the application overcommits the available GPU memory.";
        VariableName = "alwaysResident";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "EnableVmAlwaysValid";
        SettingType = "BOOL_STR";
        Description = "With this feature enabled, VM addresses are always valid within local VM context, so no \r\n
                       longer need to add private memories into the resource list. This may reduce the runtime \r\n
                       overhead of submission on Linux, but won't work for memories shared by multiple processes.";
        VariableName = "enableVmAlwaysValid";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "DisableSyncObject";
        SettingType = "BOOL_STR";
        Description = "Disable Sync Object support. Semaphore would still be based on ProOnly or Legacy interfaces \r\n
                      according to the system configuration.";
        VariableName = "disableSyncObject";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
}
Node = "Printing and Logging"
{
    Leaf
    {
        SettingName = "RecordTimeCmdBufDumpMode";
        SettingType = "BOOL_STR";
        VariableName = "recordTimeCmdBufDumpMode";
        Description = "Controls whether command buffers are dumped to a file at command recording time, this dump\r\n
                       doesn't support per-frame(s).";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "SubmitTimeCmdBufDumpMode";
        SettingType = "INT_STR";
        VariableName = "submitTimeCmdBufDumpMode";
        Description = "Controls whether command buffers are dumped to a file per command submision instead of\r\n
                       recording:\r\n
                           0 - CmdBufDumpModeDisabled, default value, no dump\r\n
                           1 - CmdBufDumpModeText, dump in text mode\r\n
                           2 - CmdBufDumpModeBinary, dump in raw binary mode\r\n
                           3 - CmdBufDumpModeBinaryHeaders, dump in binary mode with headers";
        VariableType = "CmdBufDumpMode";
        VariableDefault = "CmdBufDumpModeDisabled";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdBufDumpDirectory";
        SettingType = "STRING_DIR";
        Description = "Directory where command buffer dumps are placed.";
        VariableName = "cmdBufDumpDirectory";
        VariableType = "char";
        VariableDefaultWin = "C:\\PalCmdBuffers\\";
        VariableDefaultLnx = "/tmp/amdpal/";
        StringLength = "512";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "SubmitTimeCmdBufDumpStartFrame";
        SettingType = "INT_STR";
        VariableName = "submitTimeCmdBufDumpStartFrame";
        Description = "The starting frame to dump command buffer.";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "SubmitTimeCmdBufDumpEndFrame";
        SettingType = "INT_STR";
        VariableName = "submitTimeCmdBufDumpEndFrame";
        Description = "The ending frame to dump command buffer.";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "LogCmdBufCommitSizes";
        SettingType = "BOOL_STR";
        VariableName = "logCmdBufCommitSizes";
        Description = "Controls whether command stream commit sizes are logged to a file.\r\n
                       This will only function on debug builds.";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "LogPipelineInfo";
        SettingType = "HEX_STR";
        Description = "Filters which types of pipeline information logs are enabled:\r\n
                        0x1 - Log internal pipelines (i.e., the RPM pipelines, etc.)\r\n
                        0x2 - Log external pipelines (i.e., the Application's pipelines)\r\n
                        0x4 - The pipeline log will be in text format\r\n
                        0x8 - The pipeline log will be ELF format\r\n
                        \r\n
                        By default, no pipelines' information is logged.  If neither ELF nor text logs are selected, PAL\r\n
                        will default to text format logs.  (This setting only applies to Debug builds.)";
        VariableName = "logPipelines";
        VariableType = "uint32";
        VariableDefault = "PipelineLogNone";
        SettingScope = "PrivatePalKey";
    }

    Leaf
    {
        SettingName = "FilterPipelineInfoLogsByType";
        SettingType = "HEX_STR";
        Description = "Filters which types of pipeline information logs are enabled:\r\n
                        0    - Do not disable logging based on pipeline type \r\n
                        0x01 - Disable logging for Cs pipelines \r\n
                        0x02 - Disable logging for NGG pipelines \r\n
                        0x04 - Disable logging for Gs pipelines \r\n
                        0x08 - Disable logging for Tess pipelines \r\n
                        0x10 - Disable logging for VsPs pipelines \r\n
                        \r\n
                        These options can be used to log pipelines of a specific type. By default,\r\n
                        all the pipelines allowed by LogPipelineInfo are logged. (This setting only applies to Debug builds.)";
        VariableName = "filterPipelineLogsByType";
        VariableType = "uint32";
        VariableDefault = "PipelineLogFilterNone";
        SettingScope = "PrivatePalKey";
    }

    Leaf
    {
        SettingName = "LogPipelineHash";
        SettingType = "HEX64_STR";
        Description = "If non-zero, only log the pipeline with this compiler hash.";
        VariableName = "logPipelineHash";
        VariableType = "uint64";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "LogShadersSeparately";
        SettingType = "BOOL_STR";
        Description = "If true, each shader in a pipeline will be dumped to a separate file. Otherwise,\r\n
                       the whole pipeline is placed in a single file.";
        VariableName = "logShadersSeparately";
        VariableType = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        SettingName = "LogDuplicatePipelines";
        SettingType = "BOOL_STR";
        Description = "If true, duplicate pipelines will be dumped to a file with a numeric suffix attached\r\n
                       to the filename to distinguish each copy of the pipeline.";
        VariableName = "logDuplicatePipelines";
        VariableType = "bool";
        VariableDefault = "true";
    }
    Leaf
    {
        SettingName = "PipelineLogDirectory";
        SettingType = "STRING_DIR";
        Description = "Directory where pipeline information logs are placed.\r\nEach unique pipeline\r\n
                       is in a separate file within that directory.\r\nThe log name is based on a hash\r\n
                       of the pipeline's create info and which shader stages are active.\r\n";
        VariableName = "pipelineLogDirectory";
        VariableType = "char";
        VariableDefaultWin = "C:\\PalPipelines\\";
        VariableDefaultLnx = "/tmp/amdpal/";
        StringLength = "512";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "EmbedPipelineDisassembly";
        SettingType = "BOOL_STR";
        Description = "If true, disassembly information will be embedded into compiled ELF binaries.";
        VariableName = "embedPipelineDisassembly";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
}
Node = "Command Buffer"
{
    Leaf
    {
        SettingName = "CmdStreamReserveLimit";
        SettingType = "UINT_STR";
        Description = "How many DWORDs of command space is reserved by ReserveCommands.\r\n
                       This will be clamped by each CmdStream to their CmdAllocator's chunk size.";
        VariableName = "cmdStreamReserveLimit";
        VariableType = "uint32";
        VariableDefault = "256";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdStreamEnableMemsetOnReserve";
        SettingType = "BOOL_STR";
        Description = "If true, the command stream will memset all command space to CmdStreamMemsetValue.\r\n
                       This will only function on debug builds.";
        VariableName = "cmdStreamEnableMemsetOnReserve";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdStreamMemsetValue";
        SettingType = "UINT_STR";
        Description = "If CmdStreamEnableMemsetOnReserve is true all command space will be memset to this value.\r\n
                       This will only function on debug builds.";
        VariableName = "cmdStreamMemsetValue";
        VariableType = "uint32";
        VariableDefault = "0xFFFFFFFF";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdBufChunkEnableStagingBuffer";
        SettingType = "BOOL_STR";
        Description = "If true, each command chunk allocate a system memory staging buffer.\r\n
                       Commands will be stored in this buffer until the chunk is finalized.";
        VariableName = "cmdBufChunkEnableStagingBuffer";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdAllocatorFreeOnReset";
        SettingType = "BOOL_STR";
        Description = "If true, each command allocator will free its command chunk allocations\r\n
                       when the client calls ICmdAllocator::Reset(), even though this behavior is\r\n
                       against the rules of the DX12 specification.";
        VariableName = "cmdAllocatorFreeOnReset";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdBufOptimizePm4";
        SettingType = "UINT_STR";
        VariableName = "cmdBufOptimizePm4";
        Description = "Controls fine-grain optimization of each command buffer's PM4 stream.\r\n
                       Can improve performance of CP-bound applications that have CPU cycles to\r\n
                       spare.  Setting values:\r\n\r\n
                         0: Default behavior.  Only enable optimizations when the app specifies the\r\n
                            CMD_BUFFER_OPTIMIZE_GPU_SMALL_BATCH command buffer build flag.\r\n
                         1: Force optimizations always enabled.\r\n
                         2: Force optimizations always disabled.\r\n";
        VariableType = "Pm4OptEnable";
        VariableDefault = "Pm4OptDefaultEnable";
    }
    Leaf
    {
        SettingName = "CmdBufOptimizePm4Mode";
        SettingType = "UINT_STR";
        VariableName = "cmdBufOptimizePm4Mode";
        Description = "When PM4 optimization is enabled this setting controls when command streams will use the\r\n
                       optimizer.\r\n
                       0: Pm4OptModeImmediate - When commands are written to the command stream's reserve buffer.\r\n
                       1: Pm4OptModeFinalized - When a command stream's command chunks are finalized";
        VariableType = "Pm4OptMode";
        VariableDefault = "Pm4OptModeImmediate";
    }
    Leaf
    {
        SettingName = "CmdBufForceOneTimeSubmit";
        SettingType = "UINT_STR";
        VariableName = "cmdBufForceOneTimeSubmit";
        Description = "Globally overrides the CMD_BUFFER_ONE_TIME_SUBMIT command buffer\r\n
                       building flag:\r\n\r\n
                         0: Default behavior.  No override, use app's preference.\r\n
                         1: Force CMD_BUFFER_ONE_TIME_SUBMIT always on.\r\n
                         2: Force CMD_BUFFER_ONE_TIME_SUBMIT always off.";
        VariableType = "CmdBufForceOneTimeSubmit";
        VariableDefault = "CmdBufForceOneTimeSubmitDefault";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CommandBufferPreemptionFlags";
        SettingType = "HEX_STR";
        Description = "Toggles whether or not PAL command buffers on various Engines support mid-command\r\n
                       buffer preemption. Each bit is a flag controlling preemption for a single Engine.\r\n
                         0: Preemption disabled.\r\n
                         1: Universal Engine Preemption.\r\n
                         2: DMA Engine Preemption.";
        VariableName = "commandBufferPreemptionFlags";
        VariableType = "uint32";
        VariableDefault = "UniversalEnginePreemption | DmaEnginePreemption";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CommandBufferForceCeRamDumpInPostamble";
        SettingType = "BOOL_STR";
        Description = "Toggles whether or not PAL should add a postamble to universal Queue submissions to dump CE RAM\r\n
                       whenever MCBP is enabled.:\r\n
                         False: PAL will dump CE RAM using a postamble command stream whenever the client enables\r\n
                                PAL's 'persistent CE RAM' feature. (Typically only DX9P will do this.)\r\n
                         True: PAL will dump CE RAM using a postamble command stream whenever either MCBP is enabled\r\n
                               or the client enables the 'persistent CE RAM' feature.";
        VariableName = "commandBufferForceCeRamDumpInPostamble";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "CmdUtilVerifyShadowedRegRanges";
        SettingType = "BOOL_STR";
        Description = "If true, PAL will verify that all register writes in command buffers are properly shadowed\r\n
                       when mid command buffer preemption is enabled. This can have a noticable impact on CPU\r\n
                       performance. This setting is ignored in release builds.";
        VariableName = "cmdUtilVerifyShadowedRegRanges";
        VariableType = "bool";
        VariableDefault = "true";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "SubmitOptModeOverride";
        SettingType = "UINT_STR";
        Description = "If non-zero, it forces all SubmitOptModes to a specific value.\r\n
                       0: No Override\r\n
                       1: SubmitOptMode::Default\r\n
                       2: SubmitOptMode::Disabled\r\n
                       3: SubmitOptMode::MinKernelSubmits\r\n
                       4: SubmitOptMode::MinGpuCmdOverhead\r\n";
        VariableName = "submitOptModeOverride";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
}
Node = "Resource Settings"
{
    Leaf
    {
        SettingName = "TileSwizzleMode";
        SettingType = "HEX_STR";
        Description = "Enable bank & pipe tile swizzling for surfaces. \r\n
                         0x1 - Enable tile swizzle for renderable color targets \r\n
                         0x2 - Enable tile swizzle for renderable depth-stencil targets \r\n
                         0x4 - Enable tile swizzle for shader resources";
        VariableName = "tileSwizzleMode";
        VariableType = "uint32";
        VariableDefault = "TileSwizzleAllBits";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "EnableVidMmGpuVaMappingValidation";
        SettingType = "BOOL_STR";
        Description = "On WDDM2 platforms, PAL is able to send a set of flags through to the KMD which\r\n
                       can control how the KMD handles the each GPU VA mapping when reserving VA space,\r\n
                       mapping VA space or updating the GPU page mappings. If this setting is true, then\r\n
                       PAL will request that VidMM performs extra validation that every GPU virtual address\r\n
                       mapping to a specific physical allocation specify a matching set of these KMD flags.";
        VariableName = "enableVidMmGpuVaMappingValidation";
        VariableType = "bool";
        VariableDefault = "false";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "Addr2PreferredSwizzleTypeSet";
        SettingType = "HEX_STR";
        Description = "Set preferred sizzle type mask.\r\n
                            0x00000000 : Default\r\n
                            0x00000001 : SW_*_Z_*\r\n
                            0x00000002 : SW_*_S_*\r\n
                            0x00000004 : SW_*_D_*\r\n
                            0x00000008 : SW_*_R_*\r\n";
        VariableName = "addr2PreferredSwizzleTypeSet";
        VariableType = "uint32";
        VariableDefault = "Addr2PreferredDefault";
    }
}
Node = "Prefetching (L2 Cache Warming)"
{
    Leaf
    {
        SettingName = "ShaderPrefetchMinSize";
        SettingType = "UINT_STR";
        Description = "Limit shader prefetching to shaders this size in bytes or larger.";
        VariableName = "shaderPrefetchMinSize";
        VariableType = "size_t";
        VariableDefault = "0";
    }
    Leaf
    {
        SettingName = "ShaderPrefetchClampSize";
        SettingType = "UINT_STR";
        Description = "When this setting is non-zero, clamp shader prefetching to this many\r\n
                       bytes.";
        VariableName = "shaderPrefetchClampSize";
        VariableType = "size_t";
        VariableDefault = "0";
    }
}
Node = "Shader Options"
{
    Leaf
    {
        SettingName = "AllowNonIeeeOperations";
        SettingType = "BOOL_STR";
        Description = "If true, allows SC to make optimizations at the expense of IEEE compliance.";
        VariableName = "allowNonIeeeOperations";
        VariableType = "bool";
        VariableDefault = "false";
        MaxVersion   = "354";
    }
    Leaf
    {
        SettingName = "AppendBufPerWaveAtomic";
        SettingType = "BOOL_STR";
        Description = "Controls whether or not shaders should execute one atomic instruction per wave for\r\n
                       UAV append/consume operations. If false, one atomic will be executed per thread.";
        VariableName = "appendBufPerWaveAtomic";
        VariableType = "bool";
        VariableDefault = "false";
        MaxVersion   = "354";
    }
    Leaf
    {
        SettingName = "MaxAvailableSgpr";
        SettingType = "UINT_STR";
        Description = "Artificially limits the maximum number of SGPRs available for shader compilation.\r\n
                       A value of zero disables the limit and HW defaults are used.";
        VariableName = "maxAvailableSgpr";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "MaxAvailableVgpr";
        SettingType = "UINT_STR";
        Description = "Artificially limits the maximum number of VGPRs available for shader compilation.\r\n
                       A value of zero disables the limit and HW defaults are used.";
        VariableName = "maxAvailableVgpr";
        VariableType = "uint32";
        VariableDefault = "0";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "MaxThreadGroupsPerComputeUnit";
        SettingType = "UINT_STR";
        Description = "Controls how many CS thread-groups are allowed to launch per compute unit.  This throttles\r\n
                       the shader, which can sometimes enable more graphics shader work to complete in parallel.\r\n
                       A value of zero disables limiting the number of thread-groups to launch.  This field is \r\n
                       ignored for graphics shaders.";
        VariableName = "maxThreadGroupsPerComputeUnit";
        VariableType = "uint32";
        VariableDefault = "0";
    }
}
Node = "MGPU"
{
    Leaf
    {
        SettingName = "IfhGpuMask";
        SettingType = "HEX_STR";
        Description = "Mask of the GPUs to have all submits dropped.\r\n
                       See IFH setting for IFH mode that will be applied.\r\n
                       If the bit is set, the GPU will have its submits dropped.";
        VariableName = "ifhGpuMask";
        VariableType = "uint32";
        VariableDefault = "0xF";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "HwCompositingEnabled";
        SettingType = "BOOL_STR";
        Description = "Enables support for the HW compositor (crossDisplayPresent) if the hardware\r\n
                       supports HW compositing.";
        VariableName = "hwCompositingEnabled";
        VariableType = "bool";
        VariableDefault = "true";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "MgpuCompatibilityEnabled";
        SettingType = "BOOL_STR";
        Description = "Enables support for MGPU in PAL. If MGPU Compatibility is disabled,\r\n
                       all GPUs will still be exposed to the application, but no MGPU-specific\r\n
                       compatibility flags will be returned.";
        VariableName = "mgpuCompatibilityEnabled";
        VariableType = "bool";
        VariableDefault = "true";
        SettingScope = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "PeerMemoryEnabled";
        SettingType = "BOOL_STR";
        Description = "Enables support for peer memory and peer memory transfers if the\r\n
                       hardware is capable.";
        VariableName = "peerMemoryEnabled";
        VariableType = "bool";
        VariableDefault = "true";
        SettingScope = "PrivatePalKey";
    }
}
Node = "WSI"
{
    Leaf
    {
        SettingName     = "ForcePresentViaGdi";
        SettingType     = "BOOL_STR";
        Description     = "Forces the present technique to use the GDI BLT path.";
        VariableName    = "forcePresentViaGdi";
        VariableType    = "bool";
        VariableDefault = "false";
        SettingScope    = "PrivatePalKey";
    }
    Leaf
    {
        SettingName = "PresentViaOglRuntime";
        SettingType = "BOOL_STR";
        VariableName = "presentViaOglRuntime";
        Description = "When true window mode present path will go through OpenGL runtime.\r\n
                       When false window mode present path still go legacy DWM API path.";
        VariableType = "bool";
        VariableDefault = "true";
        SettingScope = "PrivatePalKey";
    }
}
Node = "Layers"
{
    Leaf
    {
        SettingName     = "DebugOverlayEnabled";
        SettingType     = "BOOL_STR";
        Description     = "Enables the debug overlay.";
        VariableName    = "debugOverlayEnabled";
        VariableType    = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        SettingName = "GpuProfilerMode";
        SettingType = "UINT_STR";
        Description = "Enables and sets the SQTT mode for the GPU performance profiler layer.  Actual capture of \r\n
                       performance data must be specified via frame number with GpuProfilerStartFrame or by holding shift-F11.";
        VariableName = "gpuProfilerMode";
        VariableType = "GpuProfilerMode";
        VariableDefault = "GpuProfilerDisabled";
    }
   Leaf
    {
        SettingName = "CmdBufferLoggerEnabled";
        SettingType = "BOOL_STR";
        Description = "Enables the command buffer logger layer, which provides ICmdBuffer level annotations directly\r\n
                       in command buffer dumps. These annoations can later be deciphered using offline tools.";
        VariableName = "cmdBufferLoggerEnabled";
        VariableType = "bool";
        VariableDefault = "false";
    }
    Leaf
    {
        SettingName = "InterfaceLoggerEnabled";
        SettingType = "BOOL_STR";
        Description = "Enables the PAL interface logging layer.";
        VariableName = "interfaceLoggerEnabled";
        VariableType = "bool";
        VariableDefault = "false";
    }
}

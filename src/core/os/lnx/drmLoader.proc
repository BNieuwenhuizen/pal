# The proc list which is supposed to be hooked by the loader.
# LibraryName       type    returnType            functionName       ParameterList
# Please note:
#   1- Always stick * to the type but not variable.
#   2- Multiple line for each item is not supported.
#   3- Don't forget to add the library enum to dri3Loader.py in case a new library is required.
#   4- Always add a space between the function name and the "("
libdrm_amdgpu.so.1 @proc  int amdgpu_query_hw_ip_info (amdgpu_device_handle hDevice, unsigned type, unsigned ipInstance, struct drm_amdgpu_info_hw_ip* pInfo)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_va_op (amdgpu_bo_handle hBuffer, uint64_t offset, uint64_t size, uint64_t address, uint64_t flags, uint32_t ops)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_va_op_raw (amdgpu_device_handle hDevice, amdgpu_bo_handle hBuffer, uint64_t offset, uint64_t size, uint64_t address, uint64_t flags, uint32_t ops)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_create_semaphore (amdgpu_semaphore_handle* pSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_signal_semaphore (amdgpu_context_handle hContext, uint32_t ipType, uint32_t ipInstance, uint32_t ring, amdgpu_semaphore_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_wait_semaphore (amdgpu_context_handle hConext, uint32_t ipType, uint32_t ipInstance, uint32_t ring, amdgpu_semaphore_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_destroy_semaphore (amdgpu_semaphore_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_create_sem (amdgpu_device_handle hDevice, amdgpu_sem_handle* pSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_signal_sem (amdgpu_device_handle hDevice, amdgpu_context_handle hContext, uint32_t ipType, uint32_t ipInstance, uint32_t ring, amdgpu_sem_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_wait_sem (amdgpu_device_handle hDevice, amdgpu_context_handle hContext, uint32_t ipType, uint32_t ipInstance, uint32_t ring, amdgpu_sem_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_export_sem (amdgpu_device_handle hDevice, amdgpu_sem_handle hSemaphore, int* pSharedFd)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_import_sem (amdgpu_device_handle hDevice, int fd, amdgpu_sem_handle* pSemaphore)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_destroy_sem (amdgpu_device_handle hDevice, amdgpu_sem_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  const char* amdgpu_get_marketing_name (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int amdgpu_va_range_free (amdgpu_va_handle hVaRange)
libdrm_amdgpu.so.1 @proc  int amdgpu_va_range_query (amdgpu_device_handle hDevice, enum amdgpu_gpu_va_range type, uint64_t* pStart, uint64_t* pEnd)
libdrm_amdgpu.so.1 @proc  int amdgpu_va_range_alloc (amdgpu_device_handle hDevice, enum amdgpu_gpu_va_range vaRangeType, uint64_t size, uint64_t vaBaseAlignment, uint64_t vaBaseRequired, uint64_t* pVaAllocated, amdgpu_va_handle* pVaRange, uint64_t flags)
libdrm_amdgpu.so.1 @proc  int amdgpu_read_mm_registers (amdgpu_device_handle hDevice, unsigned dwordOffset, unsigned count, uint32_t instance, uint32_t flags, uint32_t* pValues)
libdrm_amdgpu.so.1 @proc  int amdgpu_device_initialize (int fd, uint32_t* pMajorVersion, uint32_t* pMinorVersion, amdgpu_device_handle* pDeviceHandle)
libdrm_amdgpu.so.1 @proc  int amdgpu_device_deinitialize (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_alloc (amdgpu_device_handle hDevice, struct amdgpu_bo_alloc_request* pAllocBuffer, amdgpu_bo_handle* pBufferHandle)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_set_metadata (amdgpu_bo_handle hBuffer, struct amdgpu_bo_metadata* pInfo)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_query_info (amdgpu_bo_handle hBuffer, struct amdgpu_bo_info* pInfo)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_export (amdgpu_bo_handle hBuffer, enum amdgpu_bo_handle_type type, uint32_t* pFd)
libdrm_amdgpu.so.1 @proc  int int amdgpu_bo_import (amdgpu_device_handle hDevice, enum amdgpu_bo_handle_type type, uint32_t fd, struct amdgpu_bo_import_result* pOutput)
libdrm_amdgpu.so.1 @proc  int amdgpu_create_bo_from_user_mem (amdgpu_device_handle hDevice, void* pCpuAddress, uint64_t size, amdgpu_bo_handle* pBufferHandle)
libdrm_amdgpu.so.1 @proc  int amdgpu_find_bo_by_cpu_mapping (amdgpu_device_handle hDevice, void* pCpuAddress, uint64_t size, amdgpu_bo_handle* pBufferHandle, uint64_t* pOffsetInBuffer)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_free (amdgpu_bo_handle hBuffer)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_cpu_map (amdgpu_bo_handle hBuffer, void** ppCpuAddress)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_cpu_unmap (amdgpu_bo_handle hBuffer)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_wait_for_idle (amdgpu_bo_handle hBuffer, uint64_t timeoutInNs, bool* pBufferBusy)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_list_create (amdgpu_device_handle hDevice, uint32_t numberOfResources, amdgpu_bo_handle* pResources, uint8_t* pResourcePriorities, amdgpu_bo_list_handle* pBoListHandle)
libdrm_amdgpu.so.1 @proc  int amdgpu_bo_list_destroy (amdgpu_bo_list_handle hBoList)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_ctx_create (amdgpu_device_handle hDevice, amdgpu_context_handle* pContextHandle)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_ctx_free (amdgpu_context_handle hContext)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_submit (amdgpu_context_handle hContext, uint64_t flags, struct amdgpu_cs_request* pIbsRequest, uint32_t numberOfRequests)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_query_fence_status (struct amdgpu_cs_fence* pFence, uint64_t timeoutInNs, uint64_t flags, uint32_t* pExpired)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_wait_fences (struct amdgpu_cs_fence* pFences, uint32_t fenceCount, bool waitAll, uint64_t timeoutInNs, uint32_t* pStatus, uint32_t* pFirst)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_buffer_size_alignment (amdgpu_device_handle hDevice, struct amdgpu_buffer_size_alignments* pInfo)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_firmware_version (amdgpu_device_handle hDevice, unsigned fwType, unsigned ipInstance, unsigned index, uint32_t* pVersion, uint32_t* pFeature)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_hw_ip_count (amdgpu_device_handle hDevice, unsigned type, uint32_t* pCount)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_heap_info (amdgpu_device_handle hDevice, uint32_t heap, uint32_t flags, struct amdgpu_heap_info* pInfo)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_gpu_info (amdgpu_device_handle hDevice, struct amdgpu_gpu_info* pInfo)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_info (amdgpu_device_handle hDevice, unsigned infoId, unsigned size, void* pValue)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_private_aperture (amdgpu_device_handle hDevice, uint64_t* pStartVa, uint64_t* pEndVa)
libdrm_amdgpu.so.1 @proc  int amdgpu_query_shared_aperture (amdgpu_device_handle hDevice, uint64_t* pStartVa, uint64_t* pEndVa)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_reserved_vmid (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_unreserved_vmid (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_create_syncobj (amdgpu_device_handle hDevice, uint32_t* pSyncObj)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_destroy_syncobj (amdgpu_device_handle hDevice, uint32_t syncObj)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_export_syncobj (amdgpu_device_handle hDevice, uint32_t syncObj, int* pSharedFd)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_import_syncobj (amdgpu_device_handle hDevice, int sharedFd, uint32_t* pSyncObj)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_submit_raw (amdgpu_device_handle hDevice, amdgpu_context_handle hContext, amdgpu_bo_list_handle hBuffer, int numChunks, struct drm_amdgpu_cs_chunk* pChunks, uint64_t* pSeqNo)
libdrm_amdgpu.so.1 @proc  void amdgpu_cs_chunk_fence_to_dep (struct amdgpu_cs_fence* pFence, struct drm_amdgpu_cs_chunk_dep pDep)
libdrm_amdgpu.so.1 @proc  void amdgpu_cs_chunk_fence_info_to_data (struct amdgpu_cs_fence_info fenceInfo, struct drm_amdgpu_cs_chunk_data* pData)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_syncobj_import_sync_file (amdgpu_device_handle hDevice, uint32_t syncObj, int syncFileFd)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_syncobj_export_sync_file (amdgpu_device_handle hDevice, uint32_t syncObj, int* pSyncFileFd)
libdrm_amdgpu.so.1 @proc  int amdgpu_cs_ctx_create2 (amdgpu_device_handle hDevice, uint32_t priority, amdgpu_context_handle* pContextHandle);
libdrm.so.2        @proc  int drmGetNodeTypeFromFd (int fd)
libdrm.so.2        @proc  char* drmGetRenderDeviceNameFromFd (int fd)
libdrm.so.2        @proc  int drmGetDevices (drmDevicePtr* pDevices, int maxDevices)
libdrm.so.2        @proc  void drmFreeDevices (drmDevicePtr* pDevices, int count)
libdrm.so.2        @proc  char* drmGetBusid (int fd)
libdrm.so.2        @proc  void  drmFreeBusid (const char* pBusId)
libdrm.so.2        @proc  drmModeResPtr drmModeGetResources (int fd)
libdrm.so.2        @proc  void drmModeFreeResources (drmModeResPtr ptr)
libdrm.so.2        @proc  drmModeConnectorPtr drmModeGetConnector (int fd, uint32_t connectorId)
libdrm.so.2        @proc  void drmModeFreeConnector (drmModeConnectorPtr ptr)
libdrm.so.2        @proc  int drmGetCap (int fd, uint64_t capability, uint64_t* pValue)
libdrm.so.2        @proc  int drmSyncobjCreate (int fd, uint32_t flags, uint32_t* pHandle)
